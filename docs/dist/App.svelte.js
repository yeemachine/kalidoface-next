import './App.svelte.css.proxy.js';
/* src/App.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	add_render_callback,
	add_resize_listener,
	append,
	attr,
	binding_callbacks,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import { onMount } from "../_snowpack/pkg/svelte.js";
import { clamp } from "./utils/helpers.js";
import Canvas from "./scene/canvas.svelte.js";
import Webcam from "./tracking/webcam.svelte.js";
import FaceLandmarks from "./tracking/Holistic.svelte.js";
import Analytics from "./data/analytics.svelte.js";

// import FaceLandmarks from './tracking/FaceLandmarks.svelte'
import QuickNav from "./ui/quick_nav.svelte.js";

import Peer from "./connections/Peer.svelte.js";
import Cover from "./ui/cover.svelte.js";
import Notif from "./ui/notif.svelte.js";
import { DIM, firstLoad, breakpoint } from "./stores.js";

function create_fragment(ctx) {
	let cover;
	let t0;
	let notif;
	let t1;
	let quicknav;
	let t2;
	let main;
	let canvas;
	let t3;
	let facelandmarks;
	let t4;
	let webcam;
	let t5;
	let peer;
	let t6;
	let analytics;
	let main_resize_listener;
	let current;
	let mounted;
	let dispose;
	cover = new Cover({});
	notif = new Notif({});
	quicknav = new QuickNav({});
	canvas = new Canvas({});
	facelandmarks = new FaceLandmarks({});
	webcam = new Webcam({});
	peer = new Peer({});
	analytics = new Analytics({});

	return {
		c() {
			create_component(cover.$$.fragment);
			t0 = space();
			create_component(notif.$$.fragment);
			t1 = space();
			create_component(quicknav.$$.fragment);
			t2 = space();
			main = element("main");
			create_component(canvas.$$.fragment);
			t3 = space();
			create_component(facelandmarks.$$.fragment);
			t4 = space();
			create_component(webcam.$$.fragment);
			t5 = space();
			create_component(peer.$$.fragment);
			t6 = space();
			create_component(analytics.$$.fragment);
			attr(main, "class", "no_highlights svelte-1d5j4dg");
			add_render_callback(() => /*main_elementresize_handler*/ ctx[5].call(main));
		},
		m(target, anchor) {
			mount_component(cover, target, anchor);
			insert(target, t0, anchor);
			mount_component(notif, target, anchor);
			insert(target, t1, anchor);
			mount_component(quicknav, target, anchor);
			insert(target, t2, anchor);
			insert(target, main, anchor);
			mount_component(canvas, main, null);
			append(main, t3);
			mount_component(facelandmarks, main, null);
			append(main, t4);
			mount_component(webcam, main, null);
			append(main, t5);
			mount_component(peer, main, null);
			append(main, t6);
			mount_component(analytics, main, null);
			/*main_binding*/ ctx[4](main);
			main_resize_listener = add_resize_listener(main, /*main_elementresize_handler*/ ctx[5].bind(main));
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "orientationchange", /*updateDim*/ ctx[3]),
					listen(window, "resize", /*updateDim*/ ctx[3])
				];

				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(cover.$$.fragment, local);
			transition_in(notif.$$.fragment, local);
			transition_in(quicknav.$$.fragment, local);
			transition_in(canvas.$$.fragment, local);
			transition_in(facelandmarks.$$.fragment, local);
			transition_in(webcam.$$.fragment, local);
			transition_in(peer.$$.fragment, local);
			transition_in(analytics.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(cover.$$.fragment, local);
			transition_out(notif.$$.fragment, local);
			transition_out(quicknav.$$.fragment, local);
			transition_out(canvas.$$.fragment, local);
			transition_out(facelandmarks.$$.fragment, local);
			transition_out(webcam.$$.fragment, local);
			transition_out(peer.$$.fragment, local);
			transition_out(analytics.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(cover, detaching);
			if (detaching) detach(t0);
			destroy_component(notif, detaching);
			if (detaching) detach(t1);
			destroy_component(quicknav, detaching);
			if (detaching) detach(t2);
			if (detaching) detach(main);
			destroy_component(canvas);
			destroy_component(facelandmarks);
			destroy_component(webcam);
			destroy_component(peer);
			destroy_component(analytics);
			/*main_binding*/ ctx[4](null);
			main_resize_listener();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let appContainer, appWidth = 0, appHeight = 0;

	const updateDim = e => {
		$$invalidate(0, appWidth = appContainer.clientWidth);
		$$invalidate(1, appHeight = appContainer.clientHeight);
	};

	const updateScale = () => {
		let maxWidth = 1440;
		let scale = clamp(maxWidth / appWidth, 1.25, 2.5);

		// let scale = 1;
		DIM.set({
			w: appWidth,
			h: appHeight,
			s: scale,
			cw: appWidth * scale,
			ch: appHeight * scale
		});

		// console.log(scale)
		breakpoint.set(appWidth > 600 ? "desktop" : "mobile");
	};

	firstLoad.subscribe(e => {
		if (e) {
			const logo = document.querySelector("h1");
			logo.classList.add("fade");

			logo.addEventListener("transitionend", () => {
				logo.classList.add("pause");
			});
		}
	});

	onMount(() => {
		updateDim();
		updateScale();
	});

	function main_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			appContainer = $$value;
			$$invalidate(2, appContainer);
		});
	}

	function main_elementresize_handler() {
		appWidth = this.clientWidth;
		appHeight = this.clientHeight;
		$$invalidate(0, appWidth);
		$$invalidate(1, appHeight);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*appWidth, appHeight*/ 3) {
			$: {
				if (appWidth && appHeight) {
					updateScale();
				}
			}
		}
	};

	return [
		appWidth,
		appHeight,
		appContainer,
		updateDim,
		main_binding,
		main_elementresize_handler
	];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;