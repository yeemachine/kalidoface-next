import './toggle.svelte.css.proxy.js';
/* src/ui/components/toggle.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	null_to_empty,
	safe_not_equal,
	space,
	subscribe
} from "../../../_snowpack/pkg/svelte/internal.js";

import { haptic } from "../../utils/helpers.js";

function create_fragment(ctx) {
	let label;
	let input;
	let input_checked_value;
	let t0;
	let container;
	let div1;
	let container_class_value;
	let label_class_value;
	let mounted;
	let dispose;

	return {
		c() {
			label = element("label");
			input = element("input");
			t0 = space();
			container = element("container");
			div1 = element("div");
			div1.innerHTML = `<div class="toggleButton svelte-yzrsaq"><i class="kalicon notranslate fill small svelte-yzrsaq">jellyfill</i></div>`;
			attr(input, "type", "checkbox");
			attr(input, "aria-label", /*name*/ ctx[4]);
			input.checked = input_checked_value = /*$setting*/ ctx[6] ? true : false;
			attr(input, "class", "svelte-yzrsaq");
			attr(div1, "class", "track svelte-yzrsaq");
			attr(container, "class", container_class_value = "" + (null_to_empty(/*$setting*/ ctx[6] ? "" : /*classes*/ ctx[3]) + " svelte-yzrsaq"));
			attr(label, "name", /*name*/ ctx[4]);
			attr(label, "class", label_class_value = "" + ((/*$setting*/ ctx[6] ? "toggled" : "") + " \n    " + (/*hide*/ ctx[1] ? "hide" : "") + " \n    " + /*styles*/ ctx[2] + " svelte-yzrsaq"));
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, input);
			append(label, t0);
			append(label, container);
			append(container, div1);
			/*label_binding*/ ctx[8](label);

			if (!mounted) {
				dispose = listen(input, "change", /*handleClick*/ ctx[7]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 16) {
				attr(input, "aria-label", /*name*/ ctx[4]);
			}

			if (dirty & /*$setting*/ 64 && input_checked_value !== (input_checked_value = /*$setting*/ ctx[6] ? true : false)) {
				input.checked = input_checked_value;
			}

			if (dirty & /*$setting, classes*/ 72 && container_class_value !== (container_class_value = "" + (null_to_empty(/*$setting*/ ctx[6] ? "" : /*classes*/ ctx[3]) + " svelte-yzrsaq"))) {
				attr(container, "class", container_class_value);
			}

			if (dirty & /*name*/ 16) {
				attr(label, "name", /*name*/ ctx[4]);
			}

			if (dirty & /*$setting, hide, styles*/ 70 && label_class_value !== (label_class_value = "" + ((/*$setting*/ ctx[6] ? "toggled" : "") + " \n    " + (/*hide*/ ctx[1] ? "hide" : "") + " \n    " + /*styles*/ ctx[2] + " svelte-yzrsaq"))) {
				attr(label, "class", label_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(label);
			/*label_binding*/ ctx[8](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $setting,
		$$unsubscribe_setting = noop,
		$$subscribe_setting = () => ($$unsubscribe_setting(), $$unsubscribe_setting = subscribe(setting, $$value => $$invalidate(6, $setting = $$value)), setting);

	$$self.$$.on_destroy.push(() => $$unsubscribe_setting());
	let { setting } = $$props; //Pass in a store from prop
	$$subscribe_setting();
	let { hide = false } = $$props;
	let { styles = "" } = $$props;
	let { classes = "" } = $$props;
	let { name = "" } = $$props;
	let toggleDom;
	let circlePathValues;

	const handleClick = () => {
		setting.set(!$setting);
		haptic();
	};

	function label_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			toggleDom = $$value;
			$$invalidate(5, toggleDom);
		});
	}

	$$self.$$set = $$props => {
		if ("setting" in $$props) $$subscribe_setting($$invalidate(0, setting = $$props.setting));
		if ("hide" in $$props) $$invalidate(1, hide = $$props.hide);
		if ("styles" in $$props) $$invalidate(2, styles = $$props.styles);
		if ("classes" in $$props) $$invalidate(3, classes = $$props.classes);
		if ("name" in $$props) $$invalidate(4, name = $$props.name);
	};

	return [
		setting,
		hide,
		styles,
		classes,
		name,
		toggleDom,
		$setting,
		handleClick,
		label_binding
	];
}

class Toggle extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			setting: 0,
			hide: 1,
			styles: 2,
			classes: 3,
			name: 4
		});
	}
}

export default Toggle;