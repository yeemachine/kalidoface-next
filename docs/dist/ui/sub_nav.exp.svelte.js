import './sub_nav.exp.svelte.css.proxy.js';
/* src/ui/sub_nav.exp.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	component_subscribe,
	create_in_transition,
	create_out_transition,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	set_store_value,
	set_style,
	space,
	text
} from "../../_snowpack/pkg/svelte/internal.js";

import { fade, fly } from "../../_snowpack/pkg/svelte/transition.js";
import { cubicInOut } from "../../_snowpack/pkg/svelte/easing.js";
import { DIM } from "../stores.js";
import { userExps } from "../scene/character.svelte.js";
import { profiles } from "../scene/profiles.svelte.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	child_ctx[17] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

function get_each_context_5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

// (82:4) {#each expOrder.normal as exp}
function create_each_block_5(ctx) {
	let button;
	let i0;
	let t0;
	let i1;
	let button_class_value;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[7](/*exp*/ ctx[15]);
	}

	return {
		c() {
			button = element("button");
			i0 = element("i");
			t0 = space();
			i1 = element("i");
			i1.textContent = "emote";
			attr(i0, "class", "kalicon notranslate icon-fill svelte-7f67p2");
			attr(i1, "class", "kalicon notranslate solid svelte-7f67p2");

			attr(button, "class", button_class_value = "exp no_highlights " + (/*$userExps*/ ctx[0].current === /*exp*/ ctx[15]
			? "selected"
			: "") + " svelte-7f67p2");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, i0);
			append(button, t0);
			append(button, i1);

			if (!mounted) {
				dispose = listen(button, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*$userExps, expOrder*/ 3 && button_class_value !== (button_class_value = "exp no_highlights " + (/*$userExps*/ ctx[0].current === /*exp*/ ctx[15]
			? "selected"
			: "") + " svelte-7f67p2")) {
				attr(button, "class", button_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (91:4) {#each expOrder.surprised as exp}
function create_each_block_4(ctx) {
	let button;
	let i0;
	let t0;
	let i1;
	let button_class_value;
	let mounted;
	let dispose;

	function click_handler_1() {
		return /*click_handler_1*/ ctx[8](/*exp*/ ctx[15]);
	}

	return {
		c() {
			button = element("button");
			i0 = element("i");
			t0 = space();
			i1 = element("i");
			i1.textContent = "lol";
			attr(i0, "class", "kalicon notranslate icon-fill svelte-7f67p2");
			attr(i1, "class", "kalicon notranslate solid svelte-7f67p2");

			attr(button, "class", button_class_value = "exp no_highlights " + (/*$userExps*/ ctx[0].current === /*exp*/ ctx[15]
			? "selected"
			: "") + " svelte-7f67p2");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, i0);
			append(button, t0);
			append(button, i1);

			if (!mounted) {
				dispose = listen(button, "click", click_handler_1);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*$userExps, expOrder*/ 3 && button_class_value !== (button_class_value = "exp no_highlights " + (/*$userExps*/ ctx[0].current === /*exp*/ ctx[15]
			? "selected"
			: "") + " svelte-7f67p2")) {
				attr(button, "class", button_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (98:4) {#each expOrder.angry as exp}
function create_each_block_3(ctx) {
	let button;
	let i0;
	let t0;
	let i1;
	let button_class_value;
	let mounted;
	let dispose;

	function click_handler_2() {
		return /*click_handler_2*/ ctx[9](/*exp*/ ctx[15]);
	}

	return {
		c() {
			button = element("button");
			i0 = element("i");
			t0 = space();
			i1 = element("i");
			i1.textContent = "angry";
			attr(i0, "class", "kalicon notranslate icon-fill svelte-7f67p2");
			attr(i1, "class", "kalicon notranslate solid svelte-7f67p2");

			attr(button, "class", button_class_value = "exp no_highlights " + (/*$userExps*/ ctx[0].current === /*exp*/ ctx[15]
			? "selected"
			: "") + " svelte-7f67p2");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, i0);
			append(button, t0);
			append(button, i1);

			if (!mounted) {
				dispose = listen(button, "click", click_handler_2);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*$userExps, expOrder*/ 3 && button_class_value !== (button_class_value = "exp no_highlights " + (/*$userExps*/ ctx[0].current === /*exp*/ ctx[15]
			? "selected"
			: "") + " svelte-7f67p2")) {
				attr(button, "class", button_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (105:4) {#each expOrder.sad as exp}
function create_each_block_2(ctx) {
	let button;
	let i0;
	let t0;
	let i1;
	let button_class_value;
	let mounted;
	let dispose;

	function click_handler_3() {
		return /*click_handler_3*/ ctx[10](/*exp*/ ctx[15]);
	}

	return {
		c() {
			button = element("button");
			i0 = element("i");
			t0 = space();
			i1 = element("i");
			i1.textContent = "cry";
			attr(i0, "class", "kalicon notranslate icon-fill svelte-7f67p2");
			attr(i1, "class", "kalicon notranslate solid svelte-7f67p2");

			attr(button, "class", button_class_value = "exp no_highlights " + (/*$userExps*/ ctx[0].current === /*exp*/ ctx[15]
			? "selected"
			: "") + " svelte-7f67p2");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, i0);
			append(button, t0);
			append(button, i1);

			if (!mounted) {
				dispose = listen(button, "click", click_handler_3);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*$userExps, expOrder*/ 3 && button_class_value !== (button_class_value = "exp no_highlights " + (/*$userExps*/ ctx[0].current === /*exp*/ ctx[15]
			? "selected"
			: "") + " svelte-7f67p2")) {
				attr(button, "class", button_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (112:4) {#each expOrder.blushing as exp}
function create_each_block_1(ctx) {
	let button;
	let i0;
	let t0;
	let i1;
	let button_class_value;
	let mounted;
	let dispose;

	function click_handler_4() {
		return /*click_handler_4*/ ctx[11](/*exp*/ ctx[15]);
	}

	return {
		c() {
			button = element("button");
			i0 = element("i");
			t0 = space();
			i1 = element("i");
			i1.textContent = "blush";
			attr(i0, "class", "kalicon notranslate icon-fill svelte-7f67p2");
			attr(i1, "class", "kalicon notranslate solid svelte-7f67p2");

			attr(button, "class", button_class_value = "exp no_highlights " + (/*$userExps*/ ctx[0].current === /*exp*/ ctx[15]
			? "selected"
			: "") + " svelte-7f67p2");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, i0);
			append(button, t0);
			append(button, i1);

			if (!mounted) {
				dispose = listen(button, "click", click_handler_4);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*$userExps, expOrder*/ 3 && button_class_value !== (button_class_value = "exp no_highlights " + (/*$userExps*/ ctx[0].current === /*exp*/ ctx[15]
			? "selected"
			: "") + " svelte-7f67p2")) {
				attr(button, "class", button_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (119:4) {#each expOrder.misc as exp,i}
function create_each_block(ctx) {
	let button;
	let i0;
	let t0;
	let i1;
	let t1_value = /*i*/ ctx[17] + 1 + "";
	let t1;
	let t2;
	let button_class_value;
	let mounted;
	let dispose;

	function click_handler_5() {
		return /*click_handler_5*/ ctx[12](/*exp*/ ctx[15]);
	}

	return {
		c() {
			button = element("button");
			i0 = element("i");
			t0 = space();
			i1 = element("i");
			t1 = text(t1_value);
			t2 = space();
			attr(i0, "class", "kalicon notranslate icon-fill svelte-7f67p2");
			attr(i1, "class", "numeral svelte-7f67p2");

			attr(button, "class", button_class_value = "exp no_highlights " + (/*$userExps*/ ctx[0].current === /*exp*/ ctx[15]
			? "selected"
			: "") + " svelte-7f67p2");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, i0);
			append(button, t0);
			append(button, i1);
			append(i1, t1);
			append(button, t2);

			if (!mounted) {
				dispose = listen(button, "click", click_handler_5);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*$userExps, expOrder*/ 3 && button_class_value !== (button_class_value = "exp no_highlights " + (/*$userExps*/ ctx[0].current === /*exp*/ ctx[15]
			? "selected"
			: "") + " svelte-7f67p2")) {
				attr(button, "class", button_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let container;
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let div_intro;
	let div_outro;
	let container_class_value;
	let current;
	let each_value_5 = /*expOrder*/ ctx[1].normal;
	let each_blocks_5 = [];

	for (let i = 0; i < each_value_5.length; i += 1) {
		each_blocks_5[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
	}

	let each_value_4 = /*expOrder*/ ctx[1].surprised;
	let each_blocks_4 = [];

	for (let i = 0; i < each_value_4.length; i += 1) {
		each_blocks_4[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	let each_value_3 = /*expOrder*/ ctx[1].angry;
	let each_blocks_3 = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks_3[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	let each_value_2 = /*expOrder*/ ctx[1].sad;
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let each_value_1 = /*expOrder*/ ctx[1].blushing;
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*expOrder*/ ctx[1].misc;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			container = element("container");
			div = element("div");

			for (let i = 0; i < each_blocks_5.length; i += 1) {
				each_blocks_5[i].c();
			}

			t0 = space();

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].c();
			}

			t1 = space();

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].c();
			}

			t2 = space();

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t3 = space();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t4 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "exp-list svelte-7f67p2");

			set_style(div, "--exp-list-num", /*$userExps*/ ctx[0].list.length
			? /*findRows*/ ctx[3](/*$userExps*/ ctx[0].list.length)
			: "");

			attr(container, "class", container_class_value = "" + ((/*shouldJustifyWidth*/ ctx[4](/*$userExps*/ ctx[0].list.length, /*$DIM*/ ctx[2].w)
			? "justifyWidth"
			: "") + " " + (/*shouldJustifyHeight*/ ctx[5](/*$userExps*/ ctx[0].list.length, /*$DIM*/ ctx[2].h)
			? "justifyHeight"
			: "") + " svelte-7f67p2"));
		},
		m(target, anchor) {
			insert(target, container, anchor);
			append(container, div);

			for (let i = 0; i < each_blocks_5.length; i += 1) {
				each_blocks_5[i].m(div, null);
			}

			append(div, t0);

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].m(div, null);
			}

			append(div, t1);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].m(div, null);
			}

			append(div, t2);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(div, null);
			}

			append(div, t3);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div, null);
			}

			append(div, t4);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;

			if (dirty & /*$userExps, expOrder, setEmotion*/ 67) {
				each_value_5 = /*expOrder*/ ctx[1].normal;
				let i;

				for (i = 0; i < each_value_5.length; i += 1) {
					const child_ctx = get_each_context_5(ctx, each_value_5, i);

					if (each_blocks_5[i]) {
						each_blocks_5[i].p(child_ctx, dirty);
					} else {
						each_blocks_5[i] = create_each_block_5(child_ctx);
						each_blocks_5[i].c();
						each_blocks_5[i].m(div, t0);
					}
				}

				for (; i < each_blocks_5.length; i += 1) {
					each_blocks_5[i].d(1);
				}

				each_blocks_5.length = each_value_5.length;
			}

			if (dirty & /*$userExps, expOrder, setEmotion*/ 67) {
				each_value_4 = /*expOrder*/ ctx[1].surprised;
				let i;

				for (i = 0; i < each_value_4.length; i += 1) {
					const child_ctx = get_each_context_4(ctx, each_value_4, i);

					if (each_blocks_4[i]) {
						each_blocks_4[i].p(child_ctx, dirty);
					} else {
						each_blocks_4[i] = create_each_block_4(child_ctx);
						each_blocks_4[i].c();
						each_blocks_4[i].m(div, t1);
					}
				}

				for (; i < each_blocks_4.length; i += 1) {
					each_blocks_4[i].d(1);
				}

				each_blocks_4.length = each_value_4.length;
			}

			if (dirty & /*$userExps, expOrder, setEmotion*/ 67) {
				each_value_3 = /*expOrder*/ ctx[1].angry;
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks_3[i]) {
						each_blocks_3[i].p(child_ctx, dirty);
					} else {
						each_blocks_3[i] = create_each_block_3(child_ctx);
						each_blocks_3[i].c();
						each_blocks_3[i].m(div, t2);
					}
				}

				for (; i < each_blocks_3.length; i += 1) {
					each_blocks_3[i].d(1);
				}

				each_blocks_3.length = each_value_3.length;
			}

			if (dirty & /*$userExps, expOrder, setEmotion*/ 67) {
				each_value_2 = /*expOrder*/ ctx[1].sad;
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
					} else {
						each_blocks_2[i] = create_each_block_2(child_ctx);
						each_blocks_2[i].c();
						each_blocks_2[i].m(div, t3);
					}
				}

				for (; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d(1);
				}

				each_blocks_2.length = each_value_2.length;
			}

			if (dirty & /*$userExps, expOrder, setEmotion*/ 67) {
				each_value_1 = /*expOrder*/ ctx[1].blushing;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div, t4);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*$userExps, expOrder, setEmotion*/ 67) {
				each_value = /*expOrder*/ ctx[1].misc;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (!current || dirty & /*$userExps*/ 1) {
				set_style(div, "--exp-list-num", /*$userExps*/ ctx[0].list.length
				? /*findRows*/ ctx[3](/*$userExps*/ ctx[0].list.length)
				: "");
			}

			if (!current || dirty & /*$userExps, $DIM*/ 5 && container_class_value !== (container_class_value = "" + ((/*shouldJustifyWidth*/ ctx[4](/*$userExps*/ ctx[0].list.length, /*$DIM*/ ctx[2].w)
			? "justifyWidth"
			: "") + " " + (/*shouldJustifyHeight*/ ctx[5](/*$userExps*/ ctx[0].list.length, /*$DIM*/ ctx[2].h)
			? "justifyHeight"
			: "") + " svelte-7f67p2"))) {
				attr(container, "class", container_class_value);
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);

				if (!div_intro) div_intro = create_in_transition(div, fly, {
					x: /*$DIM*/ ctx[2].w > 600 ? 0 : 20,
					y: /*$DIM*/ ctx[2].w > 600 ? 20 : 0,
					easing: cubicInOut,
					duration: 400,
					delay: 200
				});

				div_intro.start();
			});

			current = true;
		},
		o(local) {
			if (div_intro) div_intro.invalidate();

			div_outro = create_out_transition(div, fade, {
				duration: /*$DIM*/ ctx[2].w > 600 ? 200 : 0
			});

			current = false;
		},
		d(detaching) {
			if (detaching) detach(container);
			destroy_each(each_blocks_5, detaching);
			destroy_each(each_blocks_4, detaching);
			destroy_each(each_blocks_3, detaching);
			destroy_each(each_blocks_2, detaching);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			if (detaching && div_outro) div_outro.end();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $profiles;
	let $userExps;
	let $DIM;
	component_subscribe($$self, profiles, $$value => $$invalidate(13, $profiles = $$value));
	component_subscribe($$self, userExps, $$value => $$invalidate(0, $userExps = $$value));
	component_subscribe($$self, DIM, $$value => $$invalidate(2, $DIM = $$value));

	let expOrder = {
		"normal": [],
		"surprised": [],
		"angry": [],
		"sad": [],
		"blushing": [],
		"misc": []
	};

	const reorderExpressions = exps => {
		let newOrder = {
			"normal": [],
			"surprised": [],
			"angry": [],
			"sad": [],
			"blushing": [],
			"misc": []
		};

		exps.list.forEach((e, i) => {
			let expName = e.Name || e.name || i;

			switch (true) {
				case (/normal/i).test(expName):
					newOrder.normal.push(expName);
					break;
				case (/surprised/i).test(expName):
					newOrder.surprised.push(expName);
					break;
				case (/angry/i).test(expName):
					newOrder.angry.push(expName);
					break;
				case (/sad/i).test(expName):
					newOrder.sad.push(expName);
					break;
				case (/blushing/i).test(expName):
					newOrder.blushing.push(expName);
					break;
				default:
					newOrder.misc.push(expName);
			}
		});

		return newOrder;
	};

	const findRows = val => {
		if (val <= 2) {
			return 1;
		}

		return Math.round(val / 2);
	};

	const shouldJustifyWidth = (val, width) => {
		return findRows(val) * 78 + 16 + 16 < width;
	};

	const shouldJustifyHeight = (val, height) => {
		return findRows(val) * 2 * 78 + 48 + 48 < height;
	};

	const setEmotion = name => {
		if (!$profiles.user.live2d) {
			return;
		}

		if (!$profiles.user.live2d.internalModel.motionManager.expressionManager) {
			return;
		}

		set_store_value(userExps, $userExps.current = name, $userExps);
		$profiles.user.live2d.expression(name);
	};

	const click_handler = exp => {
		setEmotion(exp);
	};

	const click_handler_1 = exp => {
		setEmotion(exp);
	};

	const click_handler_2 = exp => {
		setEmotion(exp);
	};

	const click_handler_3 = exp => {
		setEmotion(exp);
	};

	const click_handler_4 = exp => {
		setEmotion(exp);
	};

	const click_handler_5 = exp => {
		setEmotion(exp);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$userExps*/ 1) {
			$: {
				console.log($userExps);

				if ($userExps.list.length > 0) {
					$$invalidate(1, expOrder = reorderExpressions($userExps));
				}
			}
		}
	};

	return [
		$userExps,
		expOrder,
		$DIM,
		findRows,
		shouldJustifyWidth,
		shouldJustifyHeight,
		setEmotion,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5
	];
}

class Sub_nav_exp extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Sub_nav_exp;