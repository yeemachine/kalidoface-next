import './cover.svelte.css.proxy.js';
/* src/ui/cover.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	check_outros,
	component_subscribe,
	create_component,
	create_out_transition,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	svg_element,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { fade, fly } from "../../_snowpack/pkg/svelte/transition.js";
import { cubicInOut } from "../../_snowpack/pkg/svelte/easing.js";
import SVGWipe from "../components/SVGWipe.svelte.js";

import {
	DIM,
	firstLoad,
	quickNavExpanded,
	infoExpanded,
	largeWipe,
	setLang
} from "../stores.js";

import Credits from "./credits.svelte.js";
import { tagline } from "../text/translations.js";

function create_default_slot(ctx) {
	let style;
	let t1;
	let defs;
	let linearGradient0;
	let stop0;
	let stop1;
	let linearGradient1;
	let stop2;
	let stop3;
	let linearGradient2;
	let stop4;
	let stop5;
	let t2;
	let path0;
	let path0_fill_value;
	let t3;
	let path1;
	let path1_fill_value;
	let t4;
	let path2;
	let path2_fill_value;

	return {
		c() {
			style = element("style");
			style.textContent = "svg{\n             position:absolute;\n           }";
			t1 = space();
			defs = svg_element("defs");
			linearGradient0 = svg_element("linearGradient");
			stop0 = svg_element("stop");
			stop1 = svg_element("stop");
			linearGradient1 = svg_element("linearGradient");
			stop2 = svg_element("stop");
			stop3 = svg_element("stop");
			linearGradient2 = svg_element("linearGradient");
			stop4 = svg_element("stop");
			stop5 = svg_element("stop");
			t2 = space();
			path0 = svg_element("path");
			t3 = space();
			path1 = svg_element("path");
			t4 = space();
			path2 = svg_element("path");
			attr(stop0, "offset", "0%");
			attr(stop0, "stop-color", "#5800C9");
			attr(stop1, "offset", "100%");
			attr(stop1, "stop-color", "#ff0ea1");
			attr(linearGradient0, "id", "gradient1");
			attr(linearGradient0, "x1", "0%");
			attr(linearGradient0, "y1", "0%");
			attr(linearGradient0, "x2", "0%");
			attr(linearGradient0, "y2", "100%");
			attr(stop2, "offset", "0%");
			attr(stop2, "stop-color", "#ffd392");
			attr(stop3, "offset", "100%");
			attr(stop3, "stop-color", "#ff3898");
			attr(linearGradient1, "id", "gradient2");
			attr(linearGradient1, "x1", "0%");
			attr(linearGradient1, "y1", "0%");
			attr(linearGradient1, "x2", "0%");
			attr(linearGradient1, "y2", "100%");
			attr(stop4, "offset", "0%");
			attr(stop4, "stop-color", "#38DBFF");
			attr(stop5, "offset", "100%");
			attr(stop5, "stop-color", "#5800C9");
			attr(linearGradient2, "id", "gradient3");
			attr(linearGradient2, "x1", "0%");
			attr(linearGradient2, "y1", "0%");
			attr(linearGradient2, "x2", "0%");
			attr(linearGradient2, "y2", "100%");
			attr(path0, "class", "shape-overlays__path");
			attr(path0, "fill", path0_fill_value = /*pageTheme*/ ctx[0][1]);
			attr(path1, "class", "shape-overlays__path");
			attr(path1, "fill", path1_fill_value = /*pageTheme*/ ctx[0][2]);
			attr(path2, "class", "shape-overlays__path");
			attr(path2, "fill", path2_fill_value = /*pageTheme*/ ctx[0][0]);
		},
		m(target, anchor) {
			insert(target, style, anchor);
			insert(target, t1, anchor);
			insert(target, defs, anchor);
			append(defs, linearGradient0);
			append(linearGradient0, stop0);
			append(linearGradient0, stop1);
			append(defs, linearGradient1);
			append(linearGradient1, stop2);
			append(linearGradient1, stop3);
			append(defs, linearGradient2);
			append(linearGradient2, stop4);
			append(linearGradient2, stop5);
			insert(target, t2, anchor);
			insert(target, path0, anchor);
			insert(target, t3, anchor);
			insert(target, path1, anchor);
			insert(target, t4, anchor);
			insert(target, path2, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*pageTheme*/ 1 && path0_fill_value !== (path0_fill_value = /*pageTheme*/ ctx[0][1])) {
				attr(path0, "fill", path0_fill_value);
			}

			if (dirty & /*pageTheme*/ 1 && path1_fill_value !== (path1_fill_value = /*pageTheme*/ ctx[0][2])) {
				attr(path1, "fill", path1_fill_value);
			}

			if (dirty & /*pageTheme*/ 1 && path2_fill_value !== (path2_fill_value = /*pageTheme*/ ctx[0][0])) {
				attr(path2, "fill", path2_fill_value);
			}
		},
		d(detaching) {
			if (detaching) detach(style);
			if (detaching) detach(t1);
			if (detaching) detach(defs);
			if (detaching) detach(t2);
			if (detaching) detach(path0);
			if (detaching) detach(t3);
			if (detaching) detach(path1);
			if (detaching) detach(t4);
			if (detaching) detach(path2);
		}
	};
}

// (77:4) {#if !$firstLoad}
function create_if_block_1(ctx) {
	let p;
	let raw_value = tagline[/*$setLang*/ ctx[4]] + "";
	let p_outro;
	let current;

	return {
		c() {
			p = element("p");
			attr(p, "id", "tagline");
			attr(p, "class", "svelte-1bjk5br");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			p.innerHTML = raw_value;
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*$setLang*/ 16) && raw_value !== (raw_value = tagline[/*$setLang*/ ctx[4]] + "")) p.innerHTML = raw_value;;
		},
		i(local) {
			if (current) return;
			if (p_outro) p_outro.end(1);
			current = true;
		},
		o(local) {
			p_outro = create_out_transition(p, fade, { duration: 200, delay: 600 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			if (detaching && p_outro) p_outro.end();
		}
	};
}

// (85:4) {#if $infoExpanded}
function create_if_block(ctx) {
	let credits;
	let current;
	credits = new Credits({});

	return {
		c() {
			create_component(credits.$$.fragment);
		},
		m(target, anchor) {
			mount_component(credits, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(credits.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(credits.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(credits, detaching);
		}
	};
}

function create_fragment(ctx) {
	let container;
	let svgwipe;
	let t0;
	let t1;
	let container_class_value;
	let current;

	let svgwipe_props = {
		isOpen: true,
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	svgwipe = new SVGWipe({ props: svgwipe_props });
	/*svgwipe_binding*/ ctx[5](svgwipe);
	let if_block0 = !/*$firstLoad*/ ctx[1] && create_if_block_1(ctx);
	let if_block1 = /*$infoExpanded*/ ctx[3] && create_if_block(ctx);

	return {
		c() {
			container = element("container");
			create_component(svgwipe.$$.fragment);
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			attr(container, "class", container_class_value = "" + ((/*$firstLoad*/ ctx[1] ? "loaded" : "") + " " + (/*$infoExpanded*/ ctx[3] ? "info" : "") + " svelte-1bjk5br"));
		},
		m(target, anchor) {
			insert(target, container, anchor);
			mount_component(svgwipe, container, null);
			append(container, t0);
			if (if_block0) if_block0.m(container, null);
			append(container, t1);
			if (if_block1) if_block1.m(container, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const svgwipe_changes = {};

			if (dirty & /*$$scope, pageTheme*/ 129) {
				svgwipe_changes.$$scope = { dirty, ctx };
			}

			svgwipe.$set(svgwipe_changes);

			if (!/*$firstLoad*/ ctx[1]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*$firstLoad*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(container, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*$infoExpanded*/ ctx[3]) {
				if (if_block1) {
					if (dirty & /*$infoExpanded*/ 8) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(container, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*$firstLoad, $infoExpanded*/ 10 && container_class_value !== (container_class_value = "" + ((/*$firstLoad*/ ctx[1] ? "loaded" : "") + " " + (/*$infoExpanded*/ ctx[3] ? "info" : "") + " svelte-1bjk5br"))) {
				attr(container, "class", container_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(svgwipe.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(svgwipe.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(container);
			/*svgwipe_binding*/ ctx[5](null);
			destroy_component(svgwipe);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $firstLoad;
	let $largeWipe;
	let $DIM;
	let $infoExpanded;
	let $setLang;
	component_subscribe($$self, firstLoad, $$value => $$invalidate(1, $firstLoad = $$value));
	component_subscribe($$self, largeWipe, $$value => $$invalidate(2, $largeWipe = $$value));
	component_subscribe($$self, DIM, $$value => $$invalidate(6, $DIM = $$value));
	component_subscribe($$self, infoExpanded, $$value => $$invalidate(3, $infoExpanded = $$value));
	component_subscribe($$self, setLang, $$value => $$invalidate(4, $setLang = $$value));
	let pageTheme = ["var(--offblack)", "url(#gradient2)", "url(#gradient3)"];

	infoExpanded.subscribe(e => {
		if ($firstLoad) {
			if (e) {
				$$invalidate(0, pageTheme = ["#2b2a35", "#2b2a35", "none"]);

				$largeWipe.animate({
					action: "open",
					axis: "y",
					_curve: "wave",
					_flip: false,
					_numPoints: 6,
					_duration: 800
				});
			} else {
				$$invalidate(0, pageTheme = ["#2b2a35", "none", "none"]);

				$largeWipe.animate({
					// action:'close',
					axis: "y",
					_curve: "wave",
					_flip: false,
					_numPoints: 6,
					_duration: 800
				});
			}
		}
	});

	firstLoad.subscribe(e => {
		if (e) {
			let isMobile = $DIM.w < 600;

			$largeWipe.animate({
				axis: isMobile ? "x" : "x",
				_flip: isMobile ? false : false,
				_curve: "wave",
				_numPoints: 6,
				_duration: 1000
			});
		}
	});

	function svgwipe_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			$largeWipe = $$value;
			largeWipe.set($largeWipe);
		});
	}

	return [pageTheme, $firstLoad, $largeWipe, $infoExpanded, $setLang, svgwipe_binding];
}

class Cover extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Cover;