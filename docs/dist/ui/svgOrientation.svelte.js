import './svgOrientation.svelte.css.proxy.js';
/* src/ui/svgOrientation.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	check_outros,
	create_in_transition,
	create_out_transition,
	detach,
	group_outros,
	init,
	insert,
	safe_not_equal,
	set_style,
	svg_element,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { scale, fade } from "../../_snowpack/pkg/svelte/transition.js";
import { cubicInOut } from "../../_snowpack/pkg/svelte/easing.js";

function create_if_block_1(ctx) {
	let g;
	let path0;
	let path1;
	let g_intro;
	let g_outro;
	let current;

	return {
		c() {
			g = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr(path0, "opacity", "0.5");
			attr(path0, "d", "M90.5209 75.8114H64.3093C62.0367 70.1726 43.7778 22.3603 43.7778 22.3603C53.7299 16.2263 65.4519 12.6875 78.0005 12.6875C90.6603 12.6875 102.479 16.2893 112.487 22.524C112.487 22.524 92.7552 70.5563 90.5209 75.8114Z");
			attr(path0, "fill", "url(#paint0_radial)");
			attr(path0, "class", "svelte-1qaakgn");
			attr(path1, "fill-rule", "evenodd");
			attr(path1, "clip-rule", "evenodd");
			attr(path1, "d", "M44.3982 23.9551C54.1487 17.8795 65.6622 14.3694 78.0006 14.3694C90.4429 14.3694 102.047 17.9389 111.849 24.1091L113.13 20.9374C102.915 14.6357 90.88 11 78.0006 11C65.2249 11 53.2799 14.5774 43.1182 20.7857L44.3982 23.9551Z");
			attr(path1, "fill", "#C8EDFF");
			attr(path1, "class", "svelte-1qaakgn");
		},
		m(target, anchor) {
			insert(target, g, anchor);
			append(g, path0);
			append(g, path1);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (g_outro) g_outro.end(1);
				if (!g_intro) g_intro = create_in_transition(g, fade, { easing: cubicInOut, duration: 400 });
				g_intro.start();
			});

			current = true;
		},
		o(local) {
			if (g_intro) g_intro.invalidate();
			g_outro = create_out_transition(g, fade, { duration: 200 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(g);
			if (detaching && g_outro) g_outro.end();
		}
	};
}

// (32:0) {:else}
function create_else_block(ctx) {
	let circle;
	let circle_intro;
	let circle_outro;
	let current;

	return {
		c() {
			circle = svg_element("circle");
			attr(circle, "cx", "78");
			attr(circle, "cy", "78");
			attr(circle, "r", "11");
			attr(circle, "fill", "white");
			attr(circle, "class", "svelte-1qaakgn");
		},
		m(target, anchor) {
			insert(target, circle, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (circle_outro) circle_outro.end(1);
				if (!circle_intro) circle_intro = create_in_transition(circle, scale, { easing: cubicInOut, duration: 300 });
				circle_intro.start();
			});

			current = true;
		},
		o(local) {
			if (circle_intro) circle_intro.invalidate();
			circle_outro = create_out_transition(circle, fade, { duration: 200 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(circle);
			if (detaching && circle_outro) circle_outro.end();
		}
	};
}

// (27:0) {#if active}
function create_if_block(ctx) {
	let path;
	let path_intro;
	let path_outro;
	let current;

	return {
		c() {
			path = svg_element("path");
			attr(path, "d", "M85.3439 88.5557C85.8567 88.795 86.3866 88.7437 86.9335 88.4019C87.5488 88.06 88.0274 87.5815 88.3693 86.9661C88.7111 86.3508 88.7624 85.821 88.5231 85.3766C87.8394 83.9408 86.3353 81.9239 84.0108 79.3259C81.6862 76.7279 79.242 74.2837 76.6782 71.9934C74.1144 69.703 72.1146 68.2502 70.6788 67.6349C70.2003 67.4298 69.6362 67.481 68.9867 67.7887C68.4056 68.0964 67.9612 68.5408 67.6535 69.1219C67.3459 69.703 67.3117 70.25 67.551 70.7627C68.2005 72.1643 69.6875 74.1641 72.012 76.7621C74.3708 79.3259 76.8149 81.7701 79.3446 84.0947C81.9426 86.4192 83.9424 87.9062 85.3439 88.5557ZM80.8829 80.0951C85.0876 75.7537 87.6001 72.6258 88.4205 70.7115C88.6256 70.2329 88.5573 69.6859 88.2154 69.0706C87.942 68.4553 87.5147 67.9938 86.9335 67.6861C86.3524 67.3785 85.8054 67.3443 85.2927 67.5836C83.2416 68.5408 80.1479 71.0875 76.0116 75.2238L80.8829 80.0951ZM76.0116 75.2238C74.0289 77.1381 72.2342 79.0354 70.6276 80.9155C69.0893 82.7956 68.0466 84.2827 67.4997 85.3766C67.2604 85.8893 67.2946 86.4363 67.6023 87.0174C67.9783 87.5986 68.474 88.06 69.0893 88.4019C69.7046 88.7437 70.2345 88.795 70.6788 88.5557C71.7727 88.0088 73.2427 86.949 75.0886 85.3766C77.003 83.8041 78.9344 82.0436 80.8829 80.0951L76.0116 75.2238ZM81.7033 83.2742C81.9768 83.411 82.2332 83.3939 82.4725 83.2229C82.7801 83.052 83.0194 82.8127 83.1903 82.5051C83.3613 82.1974 83.3954 81.9239 83.2929 81.6847C82.9169 80.9668 82.1477 79.9583 80.9854 78.6593C79.8574 77.3945 78.6438 76.181 77.3448 75.0187C76.08 73.8906 75.0886 73.1727 74.3708 72.8651C74.1315 72.7625 73.8409 72.7796 73.4991 72.9164C73.2256 73.0531 73.0034 73.2753 72.8325 73.583C72.6957 73.8564 72.6957 74.1299 72.8325 74.4034C73.1743 75.0871 73.9264 76.0784 75.0886 77.3774C76.2509 78.6764 77.4644 79.89 78.7293 81.0181C80.0283 82.1803 81.0196 82.9324 81.7033 83.2742Z");
			attr(path, "fill", "white");
			attr(path, "class", "svelte-1qaakgn");
		},
		m(target, anchor) {
			insert(target, path, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (path_outro) path_outro.end(1);
				if (!path_intro) path_intro = create_in_transition(path, scale, { easing: cubicInOut, duration: 300 });
				path_intro.start();
			});

			current = true;
		},
		o(local) {
			if (path_intro) path_intro.invalidate();
			path_outro = create_out_transition(path, fade, { duration: 200 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(path);
			if (detaching && path_outro) path_outro.end();
		}
	};
}

function create_fragment(ctx) {
	let svg;
	let g;
	let path0;
	let path1;
	let current_block_type_index;
	let if_block1;
	let defs;
	let radialGradient;
	let stop0;
	let stop1;
	let current;
	let if_block0 = /*active*/ ctx[0] && create_if_block_1(ctx);
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*active*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			svg = svg_element("svg");
			g = svg_element("g");
			if (if_block0) if_block0.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			if_block1.c();
			defs = svg_element("defs");
			radialGradient = svg_element("radialGradient");
			stop0 = svg_element("stop");
			stop1 = svg_element("stop");
			attr(path0, "opacity", "0.1");
			attr(path0, "fill-rule", "evenodd");
			attr(path0, "clip-rule", "evenodd");
			attr(path0, "d", "M78 14.3694C42.8578 14.3694 14.3694 42.8578 14.3694 78C14.3694 113.142 42.8578 141.631 78 141.631C113.142 141.631 141.631 113.142 141.631 78C141.631 42.8578 113.142 14.3694 78 14.3694ZM11 78C11 40.9969 40.9969 11 78 11C115.003 11 145 40.9969 145 78C145 115.003 115.003 145 78 145C40.9969 145 11 115.003 11 78Z");
			attr(path0, "fill", "white");
			attr(path0, "class", "svelte-1qaakgn");
			attr(g, "id", "compass");
			set_style(g, "--rotation", (1 - /*rotation*/ ctx[1]) * 360 + "deg");
			attr(g, "class", "svelte-1qaakgn");
			attr(path1, "fill-rule", "evenodd");
			attr(path1, "clip-rule", "evenodd");
			attr(path1, "d", "M72.0839 8.17773C73.8745 2.36264 82.106 2.36263 83.8966 8.17772L95.7228 46.5845C97.1504 51.2207 92.8831 55.7577 88.0832 55.055C84.8789 54.5859 81.3358 54.2274 77.9903 54.2274C74.6448 54.2274 71.1016 54.5859 67.8973 55.055C63.0975 55.7577 58.8302 51.2207 60.2577 46.5845L72.0839 8.17773ZM110.412 60.2546L148.818 72.0808C154.633 73.8714 154.633 82.1029 148.818 83.8934L110.412 95.7197C105.775 97.1472 101.238 92.8799 101.941 88.0801C102.41 84.8757 102.769 81.3326 102.769 77.9871C102.769 74.6416 102.41 71.0985 101.941 67.8942C101.238 63.0943 105.775 58.827 110.412 60.2546ZM83.8966 147.819C82.106 153.634 73.8745 153.634 72.0839 147.819L60.2577 109.412C58.8302 104.776 63.0975 100.239 67.8973 100.941C71.1016 101.41 74.6448 101.769 77.9903 101.769C81.3358 101.769 84.8789 101.41 88.0832 100.941C92.8831 100.239 97.1504 104.776 95.7228 109.412L83.8966 147.819ZM7.18164 72.0808C1.36655 73.8714 1.36653 82.1029 7.18163 83.8934L45.5884 95.7197C50.2246 97.1472 54.7616 92.8799 54.0589 88.0801C53.5898 84.8757 53.2313 81.3326 53.2313 77.9871C53.2313 74.6416 53.5898 71.0985 54.0589 67.8942C54.7616 63.0943 50.2246 58.827 45.5884 60.2546L7.18164 72.0808Z");
			attr(path1, "fill", "white");
			attr(path1, "class", "svelte-1qaakgn");
			attr(stop0, "stop-color", "#CEEFFF");
			attr(stop1, "offset", "0.869792");
			attr(stop1, "stop-color", "#C4C4C4");
			attr(stop1, "stop-opacity", "0");
			attr(radialGradient, "id", "paint0_radial");
			attr(radialGradient, "cx", "0");
			attr(radialGradient, "cy", "0");
			attr(radialGradient, "r", "1");
			attr(radialGradient, "gradientUnits", "userSpaceOnUse");
			attr(radialGradient, "gradientTransform", "translate(77.6706 20.4308) rotate(90) scale(55.8865 400.929)");
			attr(svg, "width", "156");
			attr(svg, "height", "156");
			attr(svg, "viewBox", "0 0 156 156");
			attr(svg, "fill", "none");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "class", "svelte-1qaakgn");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, g);
			if (if_block0) if_block0.m(g, null);
			append(g, path0);
			append(svg, path1);
			if_blocks[current_block_type_index].m(svg, null);
			append(svg, defs);
			append(defs, radialGradient);
			append(radialGradient, stop0);
			append(radialGradient, stop1);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*active*/ ctx[0]) {
				if (if_block0) {
					if (dirty & /*active*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(g, path0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*rotation*/ 2) {
				set_style(g, "--rotation", (1 - /*rotation*/ ctx[1]) * 360 + "deg");
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				} else {
					
				}

				transition_in(if_block1, 1);
				if_block1.m(svg, defs);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block0) if_block0.d();
			if_blocks[current_block_type_index].d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { active = false } = $$props;
	let { fill = "#2E525F" } = $$props;
	let { rotation = 0 } = $$props;

	$$self.$$set = $$props => {
		if ("active" in $$props) $$invalidate(0, active = $$props.active);
		if ("fill" in $$props) $$invalidate(2, fill = $$props.fill);
		if ("rotation" in $$props) $$invalidate(1, rotation = $$props.rotation);
	};

	return [active, rotation, fill];
}

class SvgOrientation extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { active: 0, fill: 2, rotation: 1 });
	}
}

export default SvgOrientation;