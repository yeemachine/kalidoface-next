import './notif.svelte.css.proxy.js';
/* src/ui/notif.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_in_transition,
	create_out_transition,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	subscribe,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { writable, get } from "../../_snowpack/pkg/svelte/store.js";
import { fly } from "../../_snowpack/pkg/svelte/transition.js";
import { cubicInOut } from "../../_snowpack/pkg/svelte/easing.js";
import { DIM } from "../stores.js";

function create_if_block(ctx) {
	let div;
	let t_value = /*$notifText*/ ctx[0].text + "";
	let t;
	let div_class_value;
	let div_intro;
	let div_outro;
	let current;

	return {
		c() {
			div = element("div");
			t = text(t_value);
			attr(div, "class", div_class_value = "notification " + /*$notifText*/ ctx[0].type + " svelte-1g24hxh");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if ((!current || dirty & /*$notifText*/ 1) && t_value !== (t_value = /*$notifText*/ ctx[0].text + "")) set_data(t, t_value);

			if (!current || dirty & /*$notifText*/ 1 && div_class_value !== (div_class_value = "notification " + /*$notifText*/ ctx[0].type + " svelte-1g24hxh")) {
				attr(div, "class", div_class_value);
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);

				if (!div_intro) div_intro = create_in_transition(div, fly, {
					y: /*$DIM*/ ctx[1].w > 600 ? 20 : -20,
					easing: cubicInOut,
					duration: 400
				});

				div_intro.start();
			});

			current = true;
		},
		o(local) {
			if (div_intro) div_intro.invalidate();

			div_outro = create_out_transition(div, fly, {
				y: /*$DIM*/ ctx[1].w > 600 ? 20 : -20,
				easing: cubicInOut,
				duration: 400,
				delay: 200
			});

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && div_outro) div_outro.end();
		}
	};
}

// (23:0) {#key $notifText}
function create_key_block(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*$notifText*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*$notifText*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$notifText*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let previous_key = /*$notifText*/ ctx[0];
	let key_block_anchor;
	let current;
	let key_block = create_key_block(ctx);

	return {
		c() {
			key_block.c();
			key_block_anchor = empty();
		},
		m(target, anchor) {
			key_block.m(target, anchor);
			insert(target, key_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*$notifText*/ 1 && safe_not_equal(previous_key, previous_key = /*$notifText*/ ctx[0])) {
				group_outros();
				transition_out(key_block, 1, 1, noop);
				check_outros();
				key_block = create_key_block(ctx);
				key_block.c();
				transition_in(key_block);
				key_block.m(key_block_anchor.parentNode, key_block_anchor);
			} else {
				key_block.p(ctx, dirty);
			}
		},
		i(local) {
			if (current) return;
			transition_in(key_block);
			current = true;
		},
		o(local) {
			transition_out(key_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(key_block_anchor);
			key_block.d(detaching);
		}
	};
}

const notifText = writable(null);

function instance($$self, $$props, $$invalidate) {
	let $notifText,
		$$unsubscribe_notifText = noop,
		$$subscribe_notifText = () => ($$unsubscribe_notifText(), $$unsubscribe_notifText = subscribe(notifText, $$value => $$invalidate(0, $notifText = $$value)), notifText);

	let $DIM;
	component_subscribe($$self, notifText, $$value => $$invalidate(0, $notifText = $$value));
	component_subscribe($$self, DIM, $$value => $$invalidate(1, $DIM = $$value));
	$$self.$$.on_destroy.push(() => $$unsubscribe_notifText());
	let time;

	const resetTimer = () => {
		clearTimeout(time);

		time = setTimeout(
			() => {
				notifText.set(null);
			},
			3000
		);
	};

	notifText.subscribe(val => {
		if (val) {
			resetTimer();
		}
	});

	return [$notifText, $DIM];
}

class Notif extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Notif;
export { notifText };