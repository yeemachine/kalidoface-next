import './sub_nav.settings.svelte.css.proxy.js';
/* src/ui/sub_nav.settings.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	component_subscribe,
	create_component,
	create_in_transition,
	create_out_transition,
	destroy_component,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	select_option,
	select_value,
	set_data,
	set_store_value,
	set_style,
	space,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { fade } from "../../_snowpack/pkg/svelte/transition.js";
import { cubicInOut } from "../../_snowpack/pkg/svelte/easing.js";
import { DIM, setLang, isSafari } from "../stores.js";
import { ftueState, updateFtue } from "./ftue.svelte.js";
import { onMount } from "../../_snowpack/pkg/svelte.js";

import {
	capturedDevices,
	videoDeviceId,
	hideCamera,
	hideFace
} from "../tracking/webcam.svelte.js";

import { options } from "../tracking/Holistic.svelte.js";
import Toggle from "./components/toggle.svelte.js";
import { haptic } from "../utils/helpers.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

// (68:6) {:else}
function create_else_block(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "Allow webcam access to see camera list.";
			attr(p, "class", "info svelte-1kj0upq");
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (55:9) {#if $capturedDevices.videoinput.length>0}
function create_if_block(ctx) {
	let select;
	let t;
	let div;
	let mounted;
	let dispose;
	let each_value = /*$capturedDevices*/ ctx[3].videoinput;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			div = element("div");
			attr(select, "aria-label", "Change Video Source");
			attr(select, "name", "Video Source");
			attr(select, "class", "svelte-1kj0upq");
			if (/*$videoDeviceId*/ ctx[4] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[5].call(select));
			attr(div, "class", "select_arrow svelte-1kj0upq");
		},
		m(target, anchor) {
			insert(target, select, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*$videoDeviceId*/ ctx[4]);
			insert(target, t, anchor);
			insert(target, div, anchor);

			if (!mounted) {
				dispose = listen(select, "change", /*select_change_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*$capturedDevices*/ 8) {
				each_value = /*$capturedDevices*/ ctx[3].videoinput;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*$videoDeviceId, $capturedDevices*/ 24) {
				select_option(select, /*$videoDeviceId*/ ctx[4]);
			}
		},
		d(detaching) {
			if (detaching) detach(select);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t);
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (62:8) {#each $capturedDevices.videoinput as deviceInfo}
function create_each_block(ctx) {
	let option;
	let t_value = /*deviceInfo*/ ctx[8].label + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*deviceInfo*/ ctx[8].deviceId;
			option.value = option.__value;
			attr(option, "class", "svelte-1kj0upq");
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty & /*$capturedDevices*/ 8 && t_value !== (t_value = /*deviceInfo*/ ctx[8].label + "")) set_data(t, t_value);

			if (dirty & /*$capturedDevices*/ 8 && option_value_value !== (option_value_value = /*deviceInfo*/ ctx[8].deviceId)) {
				option.__value = option_value_value;
				option.value = option.__value;
			}
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

function create_fragment(ctx) {
	let container;
	let div2;
	let div0;
	let h40;
	let t1;
	let toggle0;
	let t2;
	let div1;
	let h41;
	let t4;
	let toggle1;
	let div2_intro;
	let t5;
	let div4;
	let h42;
	let t7;
	let div3;
	let div4_intro;
	let container_intro;
	let container_outro;
	let current;

	toggle0 = new Toggle({
			props: {
				name: /*$hideCamera*/ ctx[1]
				? "Hide Video Feed"
				: "Show Video Feed",
				setting: hideCamera
			}
		});

	toggle1 = new Toggle({
			props: {
				name: /*$hideFace*/ ctx[2] ? "Hide Face" : "Show Face",
				setting: hideFace
			}
		});

	function select_block_type(ctx, dirty) {
		if (/*$capturedDevices*/ ctx[3].videoinput.length > 0) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			container = element("container");
			div2 = element("div");
			div0 = element("div");
			h40 = element("h4");
			h40.textContent = "Hide Camera Panel";
			t1 = space();
			create_component(toggle0.$$.fragment);
			t2 = space();
			div1 = element("div");
			h41 = element("h4");
			h41.textContent = "Hide Webcam Feed";
			t4 = space();
			create_component(toggle1.$$.fragment);
			t5 = space();
			div4 = element("div");
			h42 = element("h4");
			h42.textContent = "Change Camera";
			t7 = space();
			div3 = element("div");
			if_block.c();
			set_style(h40, "margin", "0");
			attr(h40, "class", "svelte-1kj0upq");
			attr(div0, "class", "toggle svelte-1kj0upq");
			set_style(h41, "margin", "0");
			attr(h41, "class", "svelte-1kj0upq");
			attr(div1, "class", "toggle svelte-1kj0upq");
			attr(div2, "class", "setting svelte-1kj0upq");
			attr(h42, "class", "svelte-1kj0upq");
			attr(div3, "class", "select svelte-1kj0upq");
			attr(div4, "class", "setting svelte-1kj0upq");
			attr(container, "class", "svelte-1kj0upq");
		},
		m(target, anchor) {
			insert(target, container, anchor);
			append(container, div2);
			append(div2, div0);
			append(div0, h40);
			append(div0, t1);
			mount_component(toggle0, div0, null);
			append(div2, t2);
			append(div2, div1);
			append(div1, h41);
			append(div1, t4);
			mount_component(toggle1, div1, null);
			append(container, t5);
			append(container, div4);
			append(div4, h42);
			append(div4, t7);
			append(div4, div3);
			if_block.m(div3, null);
			current = true;
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;
			const toggle0_changes = {};

			if (dirty & /*$hideCamera*/ 2) toggle0_changes.name = /*$hideCamera*/ ctx[1]
			? "Hide Video Feed"
			: "Show Video Feed";

			toggle0.$set(toggle0_changes);
			const toggle1_changes = {};
			if (dirty & /*$hideFace*/ 4) toggle1_changes.name = /*$hideFace*/ ctx[2] ? "Hide Face" : "Show Face";
			toggle1.$set(toggle1_changes);

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div3, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(toggle0.$$.fragment, local);
			transition_in(toggle1.$$.fragment, local);

			if (!div2_intro) {
				add_render_callback(() => {
					div2_intro = create_in_transition(div2, fade, {
						easing: cubicInOut,
						duration: 300,
						delay: 400
					});

					div2_intro.start();
				});
			}

			if (!div4_intro) {
				add_render_callback(() => {
					div4_intro = create_in_transition(div4, fade, {
						easing: cubicInOut,
						duration: 300,
						delay: 400
					});

					div4_intro.start();
				});
			}

			add_render_callback(() => {
				if (container_outro) container_outro.end(1);

				if (!container_intro) container_intro = create_in_transition(container, fade, {
					easing: cubicInOut,
					duration: 300,
					delay: 400
				});

				container_intro.start();
			});

			current = true;
		},
		o(local) {
			transition_out(toggle0.$$.fragment, local);
			transition_out(toggle1.$$.fragment, local);
			if (container_intro) container_intro.invalidate();

			container_outro = create_out_transition(container, fade, {
				duration: /*$DIM*/ ctx[0].w > 600 ? 200 : 0
			});

			current = false;
		},
		d(detaching) {
			if (detaching) detach(container);
			destroy_component(toggle0);
			destroy_component(toggle1);
			if_block.d();
			if (detaching && container_outro) container_outro.end();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $options;
	let $DIM;
	let $hideCamera;
	let $hideFace;
	let $capturedDevices;
	let $videoDeviceId;
	component_subscribe($$self, options, $$value => $$invalidate(6, $options = $$value));
	component_subscribe($$self, DIM, $$value => $$invalidate(0, $DIM = $$value));
	component_subscribe($$self, hideCamera, $$value => $$invalidate(1, $hideCamera = $$value));
	component_subscribe($$self, hideFace, $$value => $$invalidate(2, $hideFace = $$value));
	component_subscribe($$self, capturedDevices, $$value => $$invalidate(3, $capturedDevices = $$value));
	component_subscribe($$self, videoDeviceId, $$value => $$invalidate(4, $videoDeviceId = $$value));

	const toggleTracking = (e, type) => {
		e.preventDefault;

		if (!$options.holistic.enable && $options.face.enable && type === "face") {
			return;
		}

		set_store_value(options, $options[type].enable = !$options[type].enable, $options);
		haptic();

		if (!$options.holistic.enable && !$options.face.enable) {
			set_store_value(options, $options.face.enable = true, $options);
			return;
		}
	};

	function select_change_handler() {
		$videoDeviceId = select_value(this);
		videoDeviceId.set($videoDeviceId);
	}

	return [
		$DIM,
		$hideCamera,
		$hideFace,
		$capturedDevices,
		$videoDeviceId,
		select_change_handler
	];
}

class Sub_nav_settings extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Sub_nav_settings;