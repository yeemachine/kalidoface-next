import './quick_nav_archive.svelte.css.proxy.js';
/* src/ui/quick_nav_archive.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	add_flush_callback,
	add_render_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	component_subscribe,
	create_bidirectional_transition,
	create_component,
	create_in_transition,
	create_out_transition,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { onMount } from "../../_snowpack/pkg/svelte.js";
import { fade, scale } from "../../_snowpack/pkg/svelte/transition.js";
import { cubicInOut } from "../../_snowpack/pkg/svelte/easing.js";

import {
	quickNavExpanded,
	firstLoad,
	inactive,
	infoExpanded,
	DIM,
	largeWipe,
	setLang,
	hasPIP
} from "../stores.js";

import { ftueState, updateFtue } from "./ftue.svelte.js";
import { cameraOn } from "../tracking/webcam.svelte.js";
import { peerState, callTime } from "../connections/Peer.svelte.js";
import { userExps } from "../scene/character.svelte.js";
import { pipEnabled, togglePIP } from "../scene/pip.svelte.js";

import {
	toggleView,
	toggleFirstPerson,
	cameraConfig
} from "../scene/CameraControls.svelte.js";

import SubNav from "./sub_nav.svelte.js";
import SideNav from "./side_nav.svelte.js";
import Filedrop from "./filedrop.svelte.js";
import { tooltip } from "../text/translations.js";

function create_if_block_4(ctx) {
	let div;
	let div_outro;
	let current;

	return {
		c() {
			div = element("div");
			attr(div, "class", "pulse svelte-1atc1xe");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			if (div_outro) div_outro.end(1);
			current = true;
		},
		o(local) {
			div_outro = create_out_transition(div, fade, { duration: 600 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && div_outro) div_outro.end();
		}
	};
}

// (137:6) {#if $peerState === 'connected'}
function create_if_block_3(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "pulse svelte-1atc1xe");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (147:0) {#if $quickNavExpanded}
function create_if_block_2(ctx) {
	let button;
	let i0;
	let t1;
	let i1;
	let t2;
	let i1_class_value;
	let button_class_value;
	let button_transition;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			i0 = element("i");
			i0.textContent = "jellyfill3";
			t1 = space();
			i1 = element("i");
			t2 = text("info");
			attr(i0, "class", "kalicon notranslate fill small svelte-1atc1xe");
			attr(i1, "class", i1_class_value = "kalicon notranslate solid small variable " + (/*$infoExpanded*/ ctx[7] ? "end" : "") + " svelte-1atc1xe");
			attr(button, "class", button_class_value = "subButton infoToggle no_highlights \n                 " + (/*$infoExpanded*/ ctx[7] ? "selected" : "") + "\n                 " + (/*$cameraOn*/ ctx[6] ? "disabled" : "") + "\n                 " + " svelte-1atc1xe");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, i0);
			append(button, t1);
			append(button, i1);
			append(i1, t2);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*handleInfo*/ ctx[17]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*$infoExpanded*/ 128 && i1_class_value !== (i1_class_value = "kalicon notranslate solid small variable " + (/*$infoExpanded*/ ctx[7] ? "end" : "") + " svelte-1atc1xe")) {
				attr(i1, "class", i1_class_value);
			}

			if (!current || dirty[0] & /*$infoExpanded, $cameraOn*/ 192 && button_class_value !== (button_class_value = "subButton infoToggle no_highlights \n                 " + (/*$infoExpanded*/ ctx[7] ? "selected" : "") + "\n                 " + (/*$cameraOn*/ ctx[6] ? "disabled" : "") + "\n                 " + " svelte-1atc1xe")) {
				attr(button, "class", button_class_value);
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!button_transition) button_transition = create_bidirectional_transition(button, fade, { duration: 200, delay: 0 }, true);
				button_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!button_transition) button_transition = create_bidirectional_transition(button, fade, { duration: 200, delay: 0 }, false);
			button_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (detaching && button_transition) button_transition.end();
			mounted = false;
			dispose();
		}
	};
}

// (163:2) {#if $quickNavExpanded && $userExps.list.length > 0 }
function create_if_block_1(ctx) {
	let button;
	let i0;
	let t0;
	let i0_class_value;
	let t1;
	let i1;
	let button_class_value;
	let button_data_text_value;
	let button_intro;
	let button_outro;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			i0 = element("i");
			t0 = text("jellyfill");
			t1 = space();
			i1 = element("i");
			i1.textContent = "emotealt";
			attr(i0, "class", i0_class_value = "kalicon notranslate fill small " + (/*selected*/ ctx[2] === "exp" ? "forceAnimate" : "") + " svelte-1atc1xe");
			attr(i1, "class", "kalicon notranslate solid small svelte-1atc1xe");
			attr(button, "class", button_class_value = "subButton expToggle no_highlights exp\n                    " + (/*sideSelected*/ ctx[3] === "exp" ? "selected" : "") + " svelte-1atc1xe");
			attr(button, "data-text", button_data_text_value = tooltip.exp[/*$setLang*/ ctx[9]]);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, i0);
			append(i0, t0);
			append(button, t1);
			append(button, i1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler_4*/ ctx[35]),
					listen(button, "touchend", /*touchend_handler_3*/ ctx[36])
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (!current || dirty[0] & /*selected*/ 4 && i0_class_value !== (i0_class_value = "kalicon notranslate fill small " + (/*selected*/ ctx[2] === "exp" ? "forceAnimate" : "") + " svelte-1atc1xe")) {
				attr(i0, "class", i0_class_value);
			}

			if (!current || dirty[0] & /*sideSelected*/ 8 && button_class_value !== (button_class_value = "subButton expToggle no_highlights exp\n                    " + (/*sideSelected*/ ctx[3] === "exp" ? "selected" : "") + " svelte-1atc1xe")) {
				attr(button, "class", button_class_value);
			}

			if (!current || dirty[0] & /*$setLang*/ 512 && button_data_text_value !== (button_data_text_value = tooltip.exp[/*$setLang*/ ctx[9]])) {
				attr(button, "data-text", button_data_text_value);
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (button_outro) button_outro.end(1);
				if (!button_intro) button_intro = create_in_transition(button, scale, { duration: 300, easing: cubicInOut });
				button_intro.start();
			});

			current = true;
		},
		o(local) {
			if (button_intro) button_intro.invalidate();
			button_outro = create_out_transition(button, scale, { duration: 300, easing: cubicInOut });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (detaching && button_outro) button_outro.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (175:4) {#if !$pipEnabled && hasPIP}
function create_if_block(ctx) {
	let button;
	let i0;
	let t1;
	let i1;
	let button_data_text_value;
	let button_intro;
	let button_outro;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			i0 = element("i");
			i0.textContent = "jellyfill";
			t1 = space();
			i1 = element("i");
			i1.textContent = "background";
			attr(i0, "class", "kalicon notranslate fill small svelte-1atc1xe");
			attr(i1, "class", "kalicon notranslate solid small svelte-1atc1xe");
			attr(button, "class", "subButton pip svelte-1atc1xe");
			attr(button, "data-text", button_data_text_value = tooltip.pip[/*$setLang*/ ctx[9]]);
			toggle_class(button, "hide", !/*$quickNavExpanded*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, i0);
			append(button, t1);
			append(button, i1);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", togglePIP);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (!current || dirty[0] & /*$setLang*/ 512 && button_data_text_value !== (button_data_text_value = tooltip.pip[/*$setLang*/ ctx[9]])) {
				attr(button, "data-text", button_data_text_value);
			}

			if (dirty[0] & /*$quickNavExpanded*/ 2) {
				toggle_class(button, "hide", !/*$quickNavExpanded*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (button_outro) button_outro.end(1);
				if (!button_intro) button_intro = create_in_transition(button, scale, { duration: 300, easing: cubicInOut });
				button_intro.start();
			});

			current = true;
		},
		o(local) {
			if (button_intro) button_intro.invalidate();
			button_outro = create_out_transition(button, scale, { duration: 300, easing: cubicInOut });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (detaching && button_outro) button_outro.end();
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let nav;
	let input;
	let t0;
	let label;
	let t3;
	let button0;
	let i2;
	let t4;
	let i2_class_value;
	let i3;
	let button0_data_text_value;
	let t6;
	let button1;
	let i4;
	let t7;
	let i4_class_value;
	let i5;
	let button1_data_text_value;
	let t9;
	let button2;
	let i6;
	let t11;
	let i7;
	let t12;
	let i7_class_value;
	let t13;
	let button2_class_value;
	let button2_data_text_value;
	let t14;
	let button3;
	let i8;
	let t15;
	let i8_class_value;
	let i9;
	let button3_data_text_value;
	let t17;
	let button4;
	let i10;
	let t18;
	let i10_class_value;
	let t19;
	let i11;
	let t21;
	let button4_class_value;
	let button4_data_text_value;
	let nav_class_value;
	let t22;
	let subnav;
	let updating_selected;
	let updating_sideSelected;
	let t23;
	let sidenav_1;
	let updating_selected_1;
	let t24;
	let t25;
	let section;
	let t26;
	let t27;
	let div0;
	let button5;
	let i12;
	let button5_data_text_value;
	let button5_intro;
	let button5_outro;
	let t29;
	let button6;
	let i13;
	let button6_data_text_value;
	let button6_intro;
	let button6_outro;
	let t31;
	let div1;
	let div1_class_value;
	let t32;
	let filedrop;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*$ftueState*/ ctx[10].camera && create_if_block_4(ctx);
	let if_block1 = /*$peerState*/ ctx[11] === "connected" && create_if_block_3(ctx);

	function subnav_selected_binding(value) {
		/*subnav_selected_binding*/ ctx[31](value);
	}

	function subnav_sideSelected_binding(value) {
		/*subnav_sideSelected_binding*/ ctx[32](value);
	}

	let subnav_props = {};

	if (/*selected*/ ctx[2] !== void 0) {
		subnav_props.selected = /*selected*/ ctx[2];
	}

	if (/*sideSelected*/ ctx[3] !== void 0) {
		subnav_props.sideSelected = /*sideSelected*/ ctx[3];
	}

	subnav = new SubNav({ props: subnav_props });
	binding_callbacks.push(() => bind(subnav, "selected", subnav_selected_binding));
	binding_callbacks.push(() => bind(subnav, "sideSelected", subnav_sideSelected_binding));

	function sidenav_1_selected_binding(value) {
		/*sidenav_1_selected_binding*/ ctx[34](value);
	}

	let sidenav_1_props = {};

	if (/*sideSelected*/ ctx[3] !== void 0) {
		sidenav_1_props.selected = /*sideSelected*/ ctx[3];
	}

	sidenav_1 = new SideNav({ props: sidenav_1_props });
	/*sidenav_1_binding*/ ctx[33](sidenav_1);
	binding_callbacks.push(() => bind(sidenav_1, "selected", sidenav_1_selected_binding));
	let if_block2 = /*$quickNavExpanded*/ ctx[1] && create_if_block_2(ctx);
	let if_block3 = /*$quickNavExpanded*/ ctx[1] && /*$userExps*/ ctx[5].list.length > 0 && create_if_block_1(ctx);
	let if_block4 = !/*$pipEnabled*/ ctx[13] && hasPIP && create_if_block(ctx);
	filedrop = new Filedrop({ props: { selected: /*selected*/ ctx[2] } });

	return {
		c() {
			nav = element("nav");
			input = element("input");
			t0 = space();
			label = element("label");

			label.innerHTML = `<i class="kalicon fill notranslate svelte-1atc1xe">jellyfill</i> 
    <i class="kalicon solid variable notranslate svelte-1atc1xe"></i>`;

			t3 = space();
			button0 = element("button");
			i2 = element("i");
			t4 = text("jellyfill");
			i3 = element("i");
			i3.textContent = "charalt";
			t6 = space();
			button1 = element("button");
			i4 = element("i");
			t7 = text("jellyfill");
			i5 = element("i");
			i5.textContent = "sticker";
			t9 = space();
			button2 = element("button");
			i6 = element("i");
			i6.textContent = "jellyfill3";
			t11 = space();
			i7 = element("i");
			t12 = text("video");
			t13 = space();
			if (if_block0) if_block0.c();
			t14 = space();
			button3 = element("button");
			i8 = element("i");
			t15 = text("jellyfill2");
			i9 = element("i");
			i9.textContent = "backgroundalttwo";
			t17 = space();
			button4 = element("button");
			i10 = element("i");
			t18 = text("jellyfill3");
			t19 = space();
			i11 = element("i");
			i11.textContent = "phone";
			t21 = space();
			if (if_block1) if_block1.c();
			t22 = space();
			create_component(subnav.$$.fragment);
			t23 = space();
			create_component(sidenav_1.$$.fragment);
			t24 = space();
			if (if_block2) if_block2.c();
			t25 = space();
			section = element("section");
			if (if_block3) if_block3.c();
			t26 = space();
			if (if_block4) if_block4.c();
			t27 = space();
			div0 = element("div");
			button5 = element("button");
			i12 = element("i");
			i12.textContent = "background";
			t29 = space();
			button6 = element("button");
			i13 = element("i");
			i13.textContent = "background";
			t31 = space();
			div1 = element("div");
			t32 = space();
			create_component(filedrop.$$.fragment);
			attr(input, "type", "checkbox");
			attr(input, "href", "#");
			attr(input, "class", "menu-open svelte-1atc1xe");
			attr(input, "name", "menu-open");
			attr(input, "id", "menu-open");
			attr(label, "class", "menu-open-button no_highlights svelte-1atc1xe");
			attr(label, "for", "menu-open");
			attr(i2, "class", i2_class_value = "kalicon notranslate fill " + (/*selected*/ ctx[2] === "live2d" ? "forceAnimate" : "") + " svelte-1atc1xe");
			attr(i3, "class", "kalicon solid notranslate");
			attr(button0, "class", "menu-item no_highlights char svelte-1atc1xe");
			attr(button0, "data-text", button0_data_text_value = tooltip.char[/*$setLang*/ ctx[9]]);
			attr(i4, "class", i4_class_value = "kalicon notranslate fill " + (/*selected*/ ctx[2] === "sticker" ? "forceAnimate" : "") + " svelte-1atc1xe");
			attr(i5, "class", "kalicon notranslate solid");
			attr(button1, "class", "menu-item no_highlights sticker svelte-1atc1xe");
			attr(button1, "data-text", button1_data_text_value = tooltip.sticker[/*$setLang*/ ctx[9]]);
			attr(i6, "class", "kalicon notranslate fill svelte-1atc1xe");
			attr(i7, "class", i7_class_value = "kalicon notranslate solid variable " + (/*$cameraOn*/ ctx[6] ? "end" : ""));
			attr(button2, "class", button2_class_value = "menu-item video no_highlights " + (/*$cameraOn*/ ctx[6] ? "selected" : "") + " svelte-1atc1xe");

			attr(button2, "data-text", button2_data_text_value = /*$cameraOn*/ ctx[6]
			? tooltip.cameraOn[/*$setLang*/ ctx[9]]
			: tooltip.cameraOff[/*$setLang*/ ctx[9]]);

			attr(i8, "class", i8_class_value = "kalicon notranslate fill " + (/*selected*/ ctx[2] === "bg" ? "forceAnimate" : "") + " svelte-1atc1xe");
			attr(i9, "class", "kalicon notranslate solid");
			attr(button3, "class", "menu-item no_highlights bg svelte-1atc1xe");
			attr(button3, "data-text", button3_data_text_value = tooltip.bg[/*$setLang*/ ctx[9]]);
			attr(i10, "class", i10_class_value = "kalicon notranslate fill " + (/*selected*/ ctx[2] === "call" ? "forceAnimate" : "") + " svelte-1atc1xe");
			attr(i11, "class", "kalicon notranslate solid svelte-1atc1xe");
			attr(button4, "class", button4_class_value = "menu-item no_highlights " + /*$peerState*/ ctx[11] + " call" + " svelte-1atc1xe");

			attr(button4, "data-text", button4_data_text_value = /*$peerState*/ ctx[11] === "connected"
			? /*$callTime*/ ctx[12]
			: tooltip.call[/*$setLang*/ ctx[9]]);

			attr(nav, "class", nav_class_value = "menu no_highlights " + (/*selected*/ ctx[2] ? "disabled" : "") + " " + (/*$inactive*/ ctx[8] ? "inactive" : "") + " svelte-1atc1xe");
			attr(section, "class", "secondaryMenu svelte-1atc1xe");
			attr(i12, "class", "kalicon notranslate solid small svelte-1atc1xe");
			attr(button5, "class", "subButton svelte-1atc1xe");
			attr(button5, "data-text", button5_data_text_value = tooltip.selfie[/*$setLang*/ ctx[9]]);
			toggle_class(button5, "hide", !/*$quickNavExpanded*/ ctx[1]);
			toggle_class(button5, "selected", /*$cameraConfig*/ ctx[14].freeCamera && !/*$cameraConfig*/ ctx[14].firstPerson);
			attr(i13, "class", "kalicon notranslate solid small svelte-1atc1xe");
			attr(button6, "class", "subButton svelte-1atc1xe");
			attr(button6, "data-text", button6_data_text_value = tooltip.firstPerson[/*$setLang*/ ctx[9]]);
			toggle_class(button6, "hide", !/*$quickNavExpanded*/ ctx[1]);
			toggle_class(button6, "selected", /*$cameraConfig*/ ctx[14].firstPerson);
			attr(div0, "class", "tabs svelte-1atc1xe");
			attr(div1, "class", div1_class_value = "scrim " + (!/*$inactive*/ ctx[8] ? "hide" : "") + " svelte-1atc1xe");
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, input);
			input.checked = /*$quickNavExpanded*/ ctx[1];
			append(nav, t0);
			append(nav, label);
			append(nav, t3);
			append(nav, button0);
			append(button0, i2);
			append(i2, t4);
			append(button0, i3);
			append(nav, t6);
			append(nav, button1);
			append(button1, i4);
			append(i4, t7);
			append(button1, i5);
			append(nav, t9);
			append(nav, button2);
			append(button2, i6);
			append(button2, t11);
			append(button2, i7);
			append(i7, t12);
			append(button2, t13);
			if (if_block0) if_block0.m(button2, null);
			append(nav, t14);
			append(nav, button3);
			append(button3, i8);
			append(i8, t15);
			append(button3, i9);
			append(nav, t17);
			append(nav, button4);
			append(button4, i10);
			append(i10, t18);
			append(button4, t19);
			append(button4, i11);
			append(button4, t21);
			if (if_block1) if_block1.m(button4, null);
			insert(target, t22, anchor);
			mount_component(subnav, target, anchor);
			insert(target, t23, anchor);
			mount_component(sidenav_1, target, anchor);
			insert(target, t24, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, t25, anchor);
			insert(target, section, anchor);
			if (if_block3) if_block3.m(section, null);
			append(section, t26);
			if (if_block4) if_block4.m(section, null);
			insert(target, t27, anchor);
			insert(target, div0, anchor);
			append(div0, button5);
			append(button5, i12);
			append(div0, t29);
			append(div0, button6);
			append(button6, i13);
			insert(target, t31, anchor);
			insert(target, div1, anchor);
			insert(target, t32, anchor);
			mount_component(filedrop, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*input_change_handler*/ ctx[21]),
					listen(label, "mouseover", /*mouseover_handler*/ ctx[22]),
					listen(label, "mouseout", /*resetTimer*/ ctx[18]),
					listen(button0, "click", /*click_handler*/ ctx[23]),
					listen(button0, "touch", /*touch_handler*/ ctx[24]),
					listen(button1, "click", /*click_handler_1*/ ctx[25]),
					listen(button1, "touchend", /*touchend_handler*/ ctx[26]),
					listen(button2, "click", /*handleCamera*/ ctx[16]),
					listen(button3, "click", /*click_handler_2*/ ctx[27]),
					listen(button3, "touchend", /*touchend_handler_1*/ ctx[28]),
					listen(button4, "click", /*click_handler_3*/ ctx[29]),
					listen(button4, "touchend", /*touchend_handler_2*/ ctx[30]),
					listen(button5, "click", toggleView),
					listen(button6, "click", toggleFirstPerson),
					listen(div1, "mousemove", /*unhide*/ ctx[19]),
					listen(div1, "mouseout", /*resetTimer*/ ctx[18]),
					listen(div1, "click", /*unhide*/ ctx[19]),
					listen(div1, "touchstart", /*unhide*/ ctx[19])
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*$quickNavExpanded*/ 2) {
				input.checked = /*$quickNavExpanded*/ ctx[1];
			}

			if (!current || dirty[0] & /*selected*/ 4 && i2_class_value !== (i2_class_value = "kalicon notranslate fill " + (/*selected*/ ctx[2] === "live2d" ? "forceAnimate" : "") + " svelte-1atc1xe")) {
				attr(i2, "class", i2_class_value);
			}

			if (!current || dirty[0] & /*$setLang*/ 512 && button0_data_text_value !== (button0_data_text_value = tooltip.char[/*$setLang*/ ctx[9]])) {
				attr(button0, "data-text", button0_data_text_value);
			}

			if (!current || dirty[0] & /*selected*/ 4 && i4_class_value !== (i4_class_value = "kalicon notranslate fill " + (/*selected*/ ctx[2] === "sticker" ? "forceAnimate" : "") + " svelte-1atc1xe")) {
				attr(i4, "class", i4_class_value);
			}

			if (!current || dirty[0] & /*$setLang*/ 512 && button1_data_text_value !== (button1_data_text_value = tooltip.sticker[/*$setLang*/ ctx[9]])) {
				attr(button1, "data-text", button1_data_text_value);
			}

			if (!current || dirty[0] & /*$cameraOn*/ 64 && i7_class_value !== (i7_class_value = "kalicon notranslate solid variable " + (/*$cameraOn*/ ctx[6] ? "end" : ""))) {
				attr(i7, "class", i7_class_value);
			}

			if (/*$ftueState*/ ctx[10].camera) {
				if (if_block0) {
					if (dirty[0] & /*$ftueState*/ 1024) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(button2, null);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*$cameraOn*/ 64 && button2_class_value !== (button2_class_value = "menu-item video no_highlights " + (/*$cameraOn*/ ctx[6] ? "selected" : "") + " svelte-1atc1xe")) {
				attr(button2, "class", button2_class_value);
			}

			if (!current || dirty[0] & /*$cameraOn, $setLang*/ 576 && button2_data_text_value !== (button2_data_text_value = /*$cameraOn*/ ctx[6]
			? tooltip.cameraOn[/*$setLang*/ ctx[9]]
			: tooltip.cameraOff[/*$setLang*/ ctx[9]])) {
				attr(button2, "data-text", button2_data_text_value);
			}

			if (!current || dirty[0] & /*selected*/ 4 && i8_class_value !== (i8_class_value = "kalicon notranslate fill " + (/*selected*/ ctx[2] === "bg" ? "forceAnimate" : "") + " svelte-1atc1xe")) {
				attr(i8, "class", i8_class_value);
			}

			if (!current || dirty[0] & /*$setLang*/ 512 && button3_data_text_value !== (button3_data_text_value = tooltip.bg[/*$setLang*/ ctx[9]])) {
				attr(button3, "data-text", button3_data_text_value);
			}

			if (!current || dirty[0] & /*selected*/ 4 && i10_class_value !== (i10_class_value = "kalicon notranslate fill " + (/*selected*/ ctx[2] === "call" ? "forceAnimate" : "") + " svelte-1atc1xe")) {
				attr(i10, "class", i10_class_value);
			}

			if (/*$peerState*/ ctx[11] === "connected") {
				if (if_block1) {
					
				} else {
					if_block1 = create_if_block_3(ctx);
					if_block1.c();
					if_block1.m(button4, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (!current || dirty[0] & /*$peerState*/ 2048 && button4_class_value !== (button4_class_value = "menu-item no_highlights " + /*$peerState*/ ctx[11] + " call" + " svelte-1atc1xe")) {
				attr(button4, "class", button4_class_value);
			}

			if (!current || dirty[0] & /*$peerState, $callTime, $setLang*/ 6656 && button4_data_text_value !== (button4_data_text_value = /*$peerState*/ ctx[11] === "connected"
			? /*$callTime*/ ctx[12]
			: tooltip.call[/*$setLang*/ ctx[9]])) {
				attr(button4, "data-text", button4_data_text_value);
			}

			if (!current || dirty[0] & /*selected, $inactive*/ 260 && nav_class_value !== (nav_class_value = "menu no_highlights " + (/*selected*/ ctx[2] ? "disabled" : "") + " " + (/*$inactive*/ ctx[8] ? "inactive" : "") + " svelte-1atc1xe")) {
				attr(nav, "class", nav_class_value);
			}

			const subnav_changes = {};

			if (!updating_selected && dirty[0] & /*selected*/ 4) {
				updating_selected = true;
				subnav_changes.selected = /*selected*/ ctx[2];
				add_flush_callback(() => updating_selected = false);
			}

			if (!updating_sideSelected && dirty[0] & /*sideSelected*/ 8) {
				updating_sideSelected = true;
				subnav_changes.sideSelected = /*sideSelected*/ ctx[3];
				add_flush_callback(() => updating_sideSelected = false);
			}

			subnav.$set(subnav_changes);
			const sidenav_1_changes = {};

			if (!updating_selected_1 && dirty[0] & /*sideSelected*/ 8) {
				updating_selected_1 = true;
				sidenav_1_changes.selected = /*sideSelected*/ ctx[3];
				add_flush_callback(() => updating_selected_1 = false);
			}

			sidenav_1.$set(sidenav_1_changes);

			if (/*$quickNavExpanded*/ ctx[1]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*$quickNavExpanded*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_2(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(t25.parentNode, t25);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*$quickNavExpanded*/ ctx[1] && /*$userExps*/ ctx[5].list.length > 0) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[0] & /*$quickNavExpanded, $userExps*/ 34) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_1(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(section, t26);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (!/*$pipEnabled*/ ctx[13] && hasPIP) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[0] & /*$pipEnabled*/ 8192) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(section, null);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*$setLang*/ 512 && button5_data_text_value !== (button5_data_text_value = tooltip.selfie[/*$setLang*/ ctx[9]])) {
				attr(button5, "data-text", button5_data_text_value);
			}

			if (dirty[0] & /*$quickNavExpanded*/ 2) {
				toggle_class(button5, "hide", !/*$quickNavExpanded*/ ctx[1]);
			}

			if (dirty[0] & /*$cameraConfig*/ 16384) {
				toggle_class(button5, "selected", /*$cameraConfig*/ ctx[14].freeCamera && !/*$cameraConfig*/ ctx[14].firstPerson);
			}

			if (!current || dirty[0] & /*$setLang*/ 512 && button6_data_text_value !== (button6_data_text_value = tooltip.firstPerson[/*$setLang*/ ctx[9]])) {
				attr(button6, "data-text", button6_data_text_value);
			}

			if (dirty[0] & /*$quickNavExpanded*/ 2) {
				toggle_class(button6, "hide", !/*$quickNavExpanded*/ ctx[1]);
			}

			if (dirty[0] & /*$cameraConfig*/ 16384) {
				toggle_class(button6, "selected", /*$cameraConfig*/ ctx[14].firstPerson);
			}

			if (!current || dirty[0] & /*$inactive*/ 256 && div1_class_value !== (div1_class_value = "scrim " + (!/*$inactive*/ ctx[8] ? "hide" : "") + " svelte-1atc1xe")) {
				attr(div1, "class", div1_class_value);
			}

			const filedrop_changes = {};
			if (dirty[0] & /*selected*/ 4) filedrop_changes.selected = /*selected*/ ctx[2];
			filedrop.$set(filedrop_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(subnav.$$.fragment, local);
			transition_in(sidenav_1.$$.fragment, local);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(if_block4);

			add_render_callback(() => {
				if (button5_outro) button5_outro.end(1);
				if (!button5_intro) button5_intro = create_in_transition(button5, scale, { duration: 300, easing: cubicInOut });
				button5_intro.start();
			});

			add_render_callback(() => {
				if (button6_outro) button6_outro.end(1);
				if (!button6_intro) button6_intro = create_in_transition(button6, scale, { duration: 300, easing: cubicInOut });
				button6_intro.start();
			});

			transition_in(filedrop.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(subnav.$$.fragment, local);
			transition_out(sidenav_1.$$.fragment, local);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(if_block4);
			if (button5_intro) button5_intro.invalidate();
			button5_outro = create_out_transition(button5, scale, { duration: 300, easing: cubicInOut });
			if (button6_intro) button6_intro.invalidate();
			button6_outro = create_out_transition(button6, scale, { duration: 300, easing: cubicInOut });
			transition_out(filedrop.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(nav);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (detaching) detach(t22);
			destroy_component(subnav, detaching);
			if (detaching) detach(t23);
			/*sidenav_1_binding*/ ctx[33](null);
			destroy_component(sidenav_1, detaching);
			if (detaching) detach(t24);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t25);
			if (detaching) detach(section);
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			if (detaching) detach(t27);
			if (detaching) detach(div0);
			if (detaching && button5_outro) button5_outro.end();
			if (detaching && button6_outro) button6_outro.end();
			if (detaching) detach(t31);
			if (detaching) detach(div1);
			if (detaching) detach(t32);
			destroy_component(filedrop, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $userExps;
	let $cameraOn;
	let $largeWipe;
	let $infoExpanded;
	let $quickNavExpanded;
	let $inactive;
	let $firstLoad;
	let $setLang;
	let $ftueState;
	let $peerState;
	let $callTime;
	let $pipEnabled;
	let $cameraConfig;
	component_subscribe($$self, userExps, $$value => $$invalidate(5, $userExps = $$value));
	component_subscribe($$self, cameraOn, $$value => $$invalidate(6, $cameraOn = $$value));
	component_subscribe($$self, largeWipe, $$value => $$invalidate(37, $largeWipe = $$value));
	component_subscribe($$self, infoExpanded, $$value => $$invalidate(7, $infoExpanded = $$value));
	component_subscribe($$self, quickNavExpanded, $$value => $$invalidate(1, $quickNavExpanded = $$value));
	component_subscribe($$self, inactive, $$value => $$invalidate(8, $inactive = $$value));
	component_subscribe($$self, firstLoad, $$value => $$invalidate(20, $firstLoad = $$value));
	component_subscribe($$self, setLang, $$value => $$invalidate(9, $setLang = $$value));
	component_subscribe($$self, ftueState, $$value => $$invalidate(10, $ftueState = $$value));
	component_subscribe($$self, peerState, $$value => $$invalidate(11, $peerState = $$value));
	component_subscribe($$self, callTime, $$value => $$invalidate(12, $callTime = $$value));
	component_subscribe($$self, pipEnabled, $$value => $$invalidate(13, $pipEnabled = $$value));
	component_subscribe($$self, cameraConfig, $$value => $$invalidate(14, $cameraConfig = $$value));
	let selected;
	let sideSelected;
	let sidenav;
	let time;

	const handleClick = (e, state) => {
		e.preventDefault();

		if (state === "exp" && $userExps.list.length === 0) {
			return;
		}

		if (state === "exp") {
			if (sideSelected === "exp") {
				sidenav.closeMobile();
				return;
			}

			$$invalidate(3, sideSelected = state);
		} else {
			$$invalidate(2, selected = state);
		}
	};

	const handleCamera = () => {
		updateFtue("camera");
		cameraOn.set(!$cameraOn);
	};

	const handleInfo = e => {
		// e.preventDefault()
		if (!$largeWipe.transition) {
			infoExpanded.set(!$infoExpanded);
		}
	};

	const resetTimer = () => {
		clearTimeout(time);

		$$invalidate(0, time = setTimeout(
			() => {
				if (!$quickNavExpanded) {
					inactive.set(true);
				}
			},
			2000
		));
	};

	const handleInactivity = () => {
		if (!$inactive && !$quickNavExpanded) {
			resetTimer();
		}
	};

	const unhide = e => {
		e.preventDefault();
		inactive.set(false);
		resetTimer();
	};

	firstLoad.subscribe(e => {
		if (e) {
			setTimeout(
				() => {
					quickNavExpanded.set(true);
				},
				800
			);
		}
	});

	function input_change_handler() {
		$quickNavExpanded = this.checked;
		quickNavExpanded.set($quickNavExpanded);
	}

	const mouseover_handler = () => {
		clearTimeout(time);
	};

	const click_handler = e => {
		handleClick(e, "live2d");
	};

	const touch_handler = e => {
		handleClick(e, "live2d");
	};

	const click_handler_1 = e => {
		handleClick(e, "sticker");
	};

	const touchend_handler = e => {
		handleClick(e, "sticker");
	};

	const click_handler_2 = e => {
		handleClick(e, "bg");
	};

	const touchend_handler_1 = e => {
		handleClick(e, "bg");
	};

	const click_handler_3 = e => {
		handleClick(e, "call");
	};

	const touchend_handler_2 = e => {
		handleClick(e, "call");
	};

	function subnav_selected_binding(value) {
		selected = value;
		$$invalidate(2, selected);
	}

	function subnav_sideSelected_binding(value) {
		sideSelected = value;
		$$invalidate(3, sideSelected);
	}

	function sidenav_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			sidenav = $$value;
			$$invalidate(4, sidenav);
		});
	}

	function sidenav_1_selected_binding(value) {
		sideSelected = value;
		$$invalidate(3, sideSelected);
	}

	const click_handler_4 = e => {
		handleClick(e, "exp");
	};

	const touchend_handler_3 = e => {
		handleClick(e, "exp");
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*$firstLoad, $quickNavExpanded, time*/ 1048579) {
			$: {
				if ($firstLoad && !$quickNavExpanded) {
					handleInactivity();
				} else {
					clearTimeout(time);
				}
			}
		}
	};

	return [
		time,
		$quickNavExpanded,
		selected,
		sideSelected,
		sidenav,
		$userExps,
		$cameraOn,
		$infoExpanded,
		$inactive,
		$setLang,
		$ftueState,
		$peerState,
		$callTime,
		$pipEnabled,
		$cameraConfig,
		handleClick,
		handleCamera,
		handleInfo,
		resetTimer,
		unhide,
		$firstLoad,
		input_change_handler,
		mouseover_handler,
		click_handler,
		touch_handler,
		click_handler_1,
		touchend_handler,
		click_handler_2,
		touchend_handler_1,
		click_handler_3,
		touchend_handler_2,
		subnav_selected_binding,
		subnav_sideSelected_binding,
		sidenav_1_binding,
		sidenav_1_selected_binding,
		click_handler_4,
		touchend_handler_3
	];
}

class Quick_nav_archive extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {}, [-1, -1]);
	}
}

export default Quick_nav_archive;