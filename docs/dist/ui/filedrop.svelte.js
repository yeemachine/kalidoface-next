import './filedrop.svelte.css.proxy.js';
/* src/ui/filedrop.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	add_render_callback,
	attr,
	check_outros,
	component_subscribe,
	create_in_transition,
	create_out_transition,
	detach,
	element,
	empty,
	globals,
	group_outros,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

const { window: window_1 } = globals;
import { writable } from "../../_snowpack/pkg/svelte/store.js";
import { handleLive2DFiles, checkingModel } from "./sub_nav.char.svelte.js";
import { handleBGImage } from "./sub_nav.bg.svelte.js";
import { handleStickerImage } from "./sub_nav.sticker.svelte.js";
import { userModel } from "../scene/character.svelte.js";
import { profiles } from "../scene/profiles.svelte.js";
import { fly } from "../../_snowpack/pkg/svelte/transition.js";
import { cubicInOut } from "../../_snowpack/pkg/svelte/easing.js";
import { isZip } from "../utils/helpers.js";

function create_if_block(ctx) {
	let div;
	let div_class_value;
	let div_intro;
	let div_outro;
	let current;
	let mounted;
	let dispose;
	let if_block = !/*$profiles*/ ctx[1].user.destroying && create_if_block_1(ctx);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			attr(div, "class", div_class_value = "loader " + (/*$checkingModel*/ ctx[2] === "error" ? "error" : "") + " svelte-j77ux7");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			current = true;

			if (!mounted) {
				dispose = listen(div, "introstart", /*introstart_handler*/ ctx[8]);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (!/*$profiles*/ ctx[1].user.destroying) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$profiles*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (!current || dirty & /*$checkingModel*/ 4 && div_class_value !== (div_class_value = "loader " + (/*$checkingModel*/ ctx[2] === "error" ? "error" : "") + " svelte-j77ux7")) {
				attr(div, "class", div_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);

			add_render_callback(() => {
				if (div_outro) div_outro.end(1);

				if (!div_intro) div_intro = create_in_transition(div, fly, {
					x: -1 * window.innerWidth,
					duration: 400,
					easing: cubicInOut,
					opacity: 1
				});

				div_intro.start();
			});

			current = true;
		},
		o(local) {
			if (div_intro) div_intro.invalidate();

			div_outro = create_out_transition(div, fly, {
				x: 1 * window.innerWidth,
				duration: 600,
				easing: cubicInOut,
				opacity: 1
			});

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (detaching && div_outro) div_outro.end();
			mounted = false;
			dispose();
		}
	};
}

// (69:2) {#if !$profiles.user.destroying}
function create_if_block_1(ctx) {
	let div;
	let div_intro;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			attr(div, "class", "loader2 svelte-j77ux7");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = listen(div, "introend", /*introend_handler*/ ctx[7]);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		i(local) {
			if (!div_intro) {
				add_render_callback(() => {
					div_intro = create_in_transition(div, fly, {
						x: -1 * window.innerWidth,
						duration: 400,
						delay: 400,
						easing: cubicInOut,
						opacity: 1
					});

					div_intro.start();
				});
			}
		},
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let current;
	let mounted;
	let dispose;
	let if_block = (/*animating*/ ctx[0] || /*$checkingModel*/ ctx[2] === "checking") && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window_1, "dragenter", /*handleDragEnter*/ ctx[3]),
					listen(window_1, "dragleave", /*handleDragLeave*/ ctx[4]),
					listen(window_1, "drop", /*handleDragDrop*/ ctx[5]),
					listen(window_1, "dragover", /*handleDragEnter*/ ctx[3])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*animating*/ ctx[0] || /*$checkingModel*/ ctx[2] === "checking") {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*animating, $checkingModel*/ 5) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
			mounted = false;
			run_all(dispose);
		}
	};
}

let dropzone = writable(false);

function instance($$self, $$props, $$invalidate) {
	let $profiles;
	let $checkingModel;
	component_subscribe($$self, profiles, $$value => $$invalidate(1, $profiles = $$value));
	component_subscribe($$self, checkingModel, $$value => $$invalidate(2, $checkingModel = $$value));
	let { selected } = $$props;

	const preventDefaults = e => {
		e.preventDefault();
		e.stopPropagation();
	};

	const handleDragEnter = e => {
		preventDefaults(e);
		e.dataTransfer.dropEffect = "copy";
		dropzone.set(true);
	};

	const handleDragLeave = e => {
		preventDefaults(e);
		dropzone.set(false);
	};

	const handleDragDrop = e => {
		preventDefaults(e);
		dropzone.set(false);
		let files = e.dataTransfer.files;

		if (!files[0]) {
			return;
		}

		if (isZip(fileType) && !$profiles.user.destroying) {
			handleLive2DFiles(e.dataTransfer.files);
			return;
		}

		if (selected === "bg") {
			handleBGImage(files);
			return;
		}

		if (selected !== "bg") {
			handleStickerImage(files);
			return;
		}
	};

	let animating = false;
	const introend_handler = () => $$invalidate(0, animating = false);
	const introstart_handler = () => $$invalidate(0, animating = true);

	$$self.$$set = $$props => {
		if ("selected" in $$props) $$invalidate(6, selected = $$props.selected);
	};

	return [
		animating,
		$profiles,
		$checkingModel,
		handleDragEnter,
		handleDragLeave,
		handleDragDrop,
		selected,
		introend_handler,
		introstart_handler
	];
}

class Filedrop extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { selected: 6 });
	}
}

export default Filedrop;
export { dropzone };