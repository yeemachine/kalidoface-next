import './canvas.svelte.css.proxy.js';
/* src/scene/canvas.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { Application } from "../../_snowpack/pkg/@pixi/app.js";
import { Renderer, BatchRenderer } from "../../_snowpack/pkg/@pixi/core.js";
import { InteractionManager } from "../../_snowpack/pkg/@pixi/interaction.js";
import { Ticker, TickerPlugin } from "../../_snowpack/pkg/@pixi/ticker.js";
import { Graphics } from "../../_snowpack/pkg/@pixi/graphics.js";
import { Container } from "../../_snowpack/pkg/@pixi/display.js";
import { onMount } from "../../_snowpack/pkg/svelte.js";
import { clamp, getDistance } from "../utils/helpers.js";
import { DIM, subNavExpanded, hasPIP } from "../stores.js";
import PIXILive2D, { hoverOver } from "./character.svelte.js";
import Stickers from "./stickers.svelte.js";
import PIP from "./pip.svelte.js";
import BG from "./pixi.bg.svelte.js";

function create_if_block(ctx) {
	let pip;
	let current;
	pip = new PIP({ props: { canvas: /*app*/ ctx[0].view } });

	return {
		c() {
			create_component(pip.$$.fragment);
		},
		m(target, anchor) {
			mount_component(pip, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const pip_changes = {};
			if (dirty & /*app*/ 1) pip_changes.canvas = /*app*/ ctx[0].view;
			pip.$set(pip_changes);
		},
		i(local) {
			if (current) return;
			transition_in(pip.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(pip.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(pip, detaching);
		}
	};
}

function create_fragment(ctx) {
	let container1;
	let container0;
	let container0_class_value;
	let t0;
	let stickers;
	let t1;
	let pixilive2d;
	let t2;
	let bg;
	let t3;
	let if_block_anchor;
	let current;
	stickers = new Stickers({});

	pixilive2d = new PIXILive2D({
			props: {
				app: /*app*/ ctx[0],
				stage: /*app*/ ctx[0].stage,
				userContainer: /*userContainer*/ ctx[5],
				friendContainer: /*friendContainer*/ ctx[6]
			}
		});

	bg = new BG({
			props: {
				app: /*app*/ ctx[0],
				bgContainer: /*bgContainer*/ ctx[2]
			}
		});

	let if_block = hasPIP && create_if_block(ctx);

	return {
		c() {
			container1 = element("container");
			container0 = element("container");
			t0 = space();
			create_component(stickers.$$.fragment);
			t1 = space();
			create_component(pixilive2d.$$.fragment);
			t2 = space();
			create_component(bg.$$.fragment);
			t3 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();

			attr(container0, "class", container0_class_value = "canvasContainer " + (/*$hoverOver*/ ctx[3] ? "hover" : "") + " " + (/*$subNavExpanded*/ ctx[4] === "sticker"
			? "disabled"
			: "") + " svelte-1flt15c");

			attr(container1, "class", "scene svelte-1flt15c");
		},
		m(target, anchor) {
			insert(target, container1, anchor);
			append(container1, container0);
			/*container0_binding*/ ctx[8](container0);
			append(container1, t0);
			mount_component(stickers, container1, null);
			insert(target, t1, anchor);
			mount_component(pixilive2d, target, anchor);
			insert(target, t2, anchor);
			mount_component(bg, target, anchor);
			insert(target, t3, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*$hoverOver, $subNavExpanded*/ 24 && container0_class_value !== (container0_class_value = "canvasContainer " + (/*$hoverOver*/ ctx[3] ? "hover" : "") + " " + (/*$subNavExpanded*/ ctx[4] === "sticker"
			? "disabled"
			: "") + " svelte-1flt15c")) {
				attr(container0, "class", container0_class_value);
			}

			const pixilive2d_changes = {};
			if (dirty & /*app*/ 1) pixilive2d_changes.app = /*app*/ ctx[0];
			if (dirty & /*app*/ 1) pixilive2d_changes.stage = /*app*/ ctx[0].stage;
			pixilive2d.$set(pixilive2d_changes);
			const bg_changes = {};
			if (dirty & /*app*/ 1) bg_changes.app = /*app*/ ctx[0];
			if (dirty & /*bgContainer*/ 4) bg_changes.bgContainer = /*bgContainer*/ ctx[2];
			bg.$set(bg_changes);
			if (hasPIP) if_block.p(ctx, dirty);
		},
		i(local) {
			if (current) return;
			transition_in(stickers.$$.fragment, local);
			transition_in(pixilive2d.$$.fragment, local);
			transition_in(bg.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(stickers.$$.fragment, local);
			transition_out(pixilive2d.$$.fragment, local);
			transition_out(bg.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(container1);
			/*container0_binding*/ ctx[8](null);
			destroy_component(stickers);
			if (detaching) detach(t1);
			destroy_component(pixilive2d, detaching);
			if (detaching) detach(t2);
			destroy_component(bg, detaching);
			if (detaching) detach(t3);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $DIM;
	let $hoverOver;
	let $subNavExpanded;
	component_subscribe($$self, DIM, $$value => $$invalidate(7, $DIM = $$value));
	component_subscribe($$self, hoverOver, $$value => $$invalidate(3, $hoverOver = $$value));
	component_subscribe($$self, subNavExpanded, $$value => $$invalidate(4, $subNavExpanded = $$value));
	Application.registerPlugin(TickerPlugin);
	Renderer.registerPlugin("interaction", InteractionManager);
	Renderer.registerPlugin("batch", BatchRenderer);
	let canvasContainer;
	let app = new Application({ autoStart: true, transparent: true });
	const bgContainer = new Container();
	const camContainer = new Container();
	const userContainer = new Container();
	const friendContainer = new Container();

	// pointsOverlay.set(facePoints)
	app.stage.addChild(bgContainer, camContainer, friendContainer, userContainer);

	app.stage.sortableChildren = true;

	// facePoints.zIndex = -1
	bgContainer.zIndex = -2;

	onMount(async () => {
		canvasContainer.appendChild(app.view);
	});

	function container0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			canvasContainer = $$value;
			$$invalidate(1, canvasContainer);
		});
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$DIM, app*/ 129) {
			$: {
				$$invalidate(0, app.view.width = $DIM.cw, app);
				$$invalidate(0, app.view.height = $DIM.ch, app);
				app.renderer.resize($DIM.cw, $DIM.ch);
				app.render();
			}
		}
	};

	return [
		app,
		canvasContainer,
		bgContainer,
		$hoverOver,
		$subNavExpanded,
		userContainer,
		friendContainer,
		$DIM,
		container0_binding
	];
}

class Canvas extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Canvas;