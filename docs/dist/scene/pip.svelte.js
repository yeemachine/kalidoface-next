import './pip.svelte.css.proxy.js';
/* src/scene/pip.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	attr,
	binding_callbacks,
	component_subscribe,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	subscribe,
	toggle_class
} from "../../_snowpack/pkg/svelte/internal.js";

import { writable, get } from "../../_snowpack/pkg/svelte/store.js";
import { onMount } from "../../_snowpack/pkg/svelte.js";
import { fade, scale } from "../../_snowpack/pkg/svelte/transition.js";
import { cubicInOut } from "../../_snowpack/pkg/svelte/easing.js";
import { tooltip } from "../text/translations.js";
import { setLang, quickNavExpanded } from "../stores.js";

function create_fragment(ctx) {
	let video;
	let mounted;
	let dispose;

	return {
		c() {
			video = element("video");
			attr(video, "id", "pip");
			video.muted = true;
			video.playsInline = true;
			attr(video, "class", "svelte-1rxu17a");
			toggle_class(video, "enabled", /*$pipEnabled*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, video, anchor);
			/*video_binding*/ ctx[3](video);

			if (!mounted) {
				dispose = [
					listen(video, "enterpictureinpicture", enterpictureinpicture_handler),
					listen(video, "leavepictureinpicture", /*leavepictureinpicture_handler*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*$pipEnabled*/ 2) {
				toggle_class(video, "enabled", /*$pipEnabled*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(video);
			/*video_binding*/ ctx[3](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

const pipEnabled = writable(false);

const togglePIP = async e => {
	pipEnabled.set(true);
};

const enterpictureinpicture_handler = () => {
	
};

function instance($$self, $$props, $$invalidate) {
	let $pipEnabled,
		$$unsubscribe_pipEnabled = noop,
		$$subscribe_pipEnabled = () => ($$unsubscribe_pipEnabled(), $$unsubscribe_pipEnabled = subscribe(pipEnabled, $$value => $$invalidate(1, $pipEnabled = $$value)), pipEnabled);

	component_subscribe($$self, pipEnabled, $$value => $$invalidate(1, $pipEnabled = $$value));
	$$self.$$.on_destroy.push(() => $$unsubscribe_pipEnabled());
	let { canvas } = $$props;
	let Stream, pip;

	const getStream = async () => {
		if (!Stream || Stream.active === false) {
			try {
				Stream = canvas.captureStream();
				handleStream(Stream, pip);
			} catch(error) {
				pipEnabled.set(false);
				console(error);
			}
		}
	};

	let checkStream;

	const handleStream = (stream, videoObj) => {
		// console.log(stream)
		videoObj.srcObject = stream;

		checkStream = setInterval(
			() => {
				if (videoObj.readyState >= 3) {
					videoObj.play();
					activatePIP(videoObj);

					//stop checking every half second
					clearInterval(checkStream);
				}
			},
			500
		);
	};

	const stopStream = () => {
		if (Stream) {
			Stream.getTracks().forEach(track => track.stop());
		}

		pipEnabled.set(false);
		clearInterval(checkStream);
	};

	const activatePIP = async pip => {
		try {
			// let pip = document.querySelector('#pip')
			if (pip !== document.pictureInPictureElement) {
				pip.play();
				await pip.requestPictureInPicture();
			} else {
				await pip.exitPictureInPicture();
			}
		} catch(error) {
			console.log(`> Argh! ${error}`);
		} finally {
			
		}
	};

	pipEnabled.subscribe(val => {
		if (val) {
			getStream();
		} else {
			stopStream();
		}
	});

	function video_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			pip = $$value;
			$$invalidate(0, pip);
		});
	}

	const leavepictureinpicture_handler = () => {
		pipEnabled.set(false);
	};

	$$self.$$set = $$props => {
		if ("canvas" in $$props) $$invalidate(2, canvas = $$props.canvas);
	};

	return [pip, $pipEnabled, canvas, video_binding, leavepictureinpicture_handler];
}

class Pip extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { canvas: 2 });
	}
}

export default Pip;
export { pipEnabled, togglePIP };