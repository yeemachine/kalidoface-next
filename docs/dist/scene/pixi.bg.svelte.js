import './pixi.bg.svelte.css.proxy.js';
/* src/scene/pixi.bg.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	attr,
	binding_callbacks,
	component_subscribe,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	subscribe
} from "../../_snowpack/pkg/svelte/internal.js";

import { createBlobURL } from "../utils/helpers.js";
import { urlBase, getLocalStorage, subLocalStorage } from "../stores.js";
import { writable, get } from "../../_snowpack/pkg/svelte/store.js";
import { onMount } from "../../_snowpack/pkg/svelte.js";
import { firstLoad, DIM } from "../stores.js";
import { fade } from "../../_snowpack/pkg/svelte/transition.js";
import { cubicInOut } from "../../_snowpack/pkg/svelte/easing.js";
import { Sprite } from "../../_snowpack/pkg/@pixi/sprite.js";
import { Texture } from "../../_snowpack/pkg/@pixi/core.js";
import { Loader, LoaderResource } from "../../_snowpack/pkg/@pixi/loaders.js";
import { Graphics } from "../../_snowpack/pkg/@pixi/graphics.js";
import { string2hex } from "../../_snowpack/pkg/@pixi/utils.js";

function create_fragment(ctx) {
	let video;
	let video_src_value;
	let mounted;
	let dispose;

	return {
		c() {
			video = element("video");
			attr(video, "alt", "bg");

			if (video.src !== (video_src_value = /*$bgURL*/ ctx[1]
			? /*$bgURL*/ ctx[1].type === "video"
				? /*$bgURL*/ ctx[1].url
				: ""
			: "")) attr(video, "src", video_src_value);

			video.autoplay = true;
			video.muted = true;
			video.playsInline = true;
			video.loop = true;
			attr(video, "class", "svelte-26lnyn");
		},
		m(target, anchor) {
			insert(target, video, anchor);
			/*video_binding*/ ctx[8](video);

			if (!mounted) {
				dispose = listen(video, "loadeddata", /*loadeddata_handler*/ ctx[9]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*$bgURL*/ 2 && video.src !== (video_src_value = /*$bgURL*/ ctx[1]
			? /*$bgURL*/ ctx[1].type === "video"
				? /*$bgURL*/ ctx[1].url
				: ""
			: "")) {
				attr(video, "src", video_src_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(video);
			/*video_binding*/ ctx[8](null);
			mounted = false;
			dispose();
		}
	};
}

const bgURL = writable(null);

getLocalStorage(
	bgURL,
	"bgURL",
	{
		type: "img",
		url: urlBase + "BG/morning.jpeg"
	},
	createBlobURL
);

subLocalStorage(bgURL, "bgURL");

let bgList = writable([
	{
		type: "img",
		url: urlBase + "BG/morning.jpeg"
	},
	{
		type: "img",
		url: urlBase + "BG/evening.jpeg"
	},
	{ type: "color", url: "#00fc01" },
	{ type: "color", url: "#0033cc" },
	{ type: "color", url: "#ff00ff" },
	{ type: "color", url: "#ffffff" },
	{ type: "color", url: "#00fc0100" }
]);

getLocalStorage(bgList, "bgList", get(bgList), createBlobURL);
subLocalStorage(bgList, "bgList");

function instance($$self, $$props, $$invalidate) {
	let $DIM;

	let $bgURL,
		$$unsubscribe_bgURL = noop,
		$$subscribe_bgURL = () => ($$unsubscribe_bgURL(), $$unsubscribe_bgURL = subscribe(bgURL, $$value => $$invalidate(1, $bgURL = $$value)), bgURL);

	component_subscribe($$self, DIM, $$value => $$invalidate(7, $DIM = $$value));
	component_subscribe($$self, bgURL, $$value => $$invalidate(1, $bgURL = $$value));
	$$self.$$.on_destroy.push(() => $$unsubscribe_bgURL());
	let { bgContainer = null } = $$props;
	let { app = null } = $$props;
	let videoEl;
	let loader = new Loader();
	let colorBG = new Sprite.from(Texture.WHITE);
	bgContainer.addChild(colorBG);
	let currentBG = null;

	onMount(async () => {
		
	});

	const createImageSprite = async val => {
		if (val.type === "img") {
			const texture = Texture.from(val.url, { resourceOptions: { autoLoad: false } });
			let sprite = Sprite.from(await texture.baseTexture.resource.load());
			sprite.anchor.set(0.5, 0.5);
			sprite.bgURL = val;
			bgContainer.addChild(sprite);

			if (currentBG) {
				currentBG.destroy();
			}

			$$invalidate(6, currentBG = sprite);
		} else {
			let sprite = Sprite.from(videoEl);
			sprite.anchor.set(0.5, 0.5);
			sprite.bgURL = val;
			bgContainer.addChild(sprite);

			if (currentBG) {
				currentBG.destroy();
			}

			$$invalidate(6, currentBG = sprite);
		}
	};

	bgURL.subscribe(val => {
		if (val) {
			if (val.type === "img") {
				if (Object.keys(loader.resources).includes(val.url)) {
					createImageSprite(val);
				} else {
					let options = val.url.includes("blob")
					? {
							xhrType: LoaderResource.XHR_RESPONSE_TYPE.BLOB
						}
					: { crossOrigin: true };

					createImageSprite(val);
				}
			} else if (val.type === "video") {
				$$invalidate(5, colorBG.tint = 0, colorBG);
			} else if (val.type === "color" || val.type === "iro") {
				if (currentBG) {
					currentBG.destroy();
					$$invalidate(6, currentBG = null);
				}

				$$invalidate(5, colorBG.tint = string2hex(val.url), colorBG);
				$$invalidate(5, colorBG.alpha = val.url.length > 7 ? 0 : 1, colorBG);
			}
		}
	});

	function video_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			videoEl = $$value;
			$$invalidate(0, videoEl);
		});
	}

	const loadeddata_handler = () => {
		createImageSprite({ type: "video" });
	};

	$$self.$$set = $$props => {
		if ("bgContainer" in $$props) $$invalidate(3, bgContainer = $$props.bgContainer);
		if ("app" in $$props) $$invalidate(4, app = $$props.app);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*currentBG, $DIM, videoEl*/ 193) {
			$: {
				if (currentBG) {
					currentBG.position.set($DIM.cw / 2, $DIM.ch / 2);

					let bgratio = currentBG.bgURL.type === "video"
					? videoEl.videoWidth / videoEl.videoHeight
					: currentBG.width / currentBG.height;

					let canvasRatio = $DIM.w / $DIM.h;

					if (currentBG.bgURL.type === "video") {
						if (canvasRatio > bgratio) {
							$$invalidate(6, currentBG.height = videoEl.videoHeight / (videoEl.videoWidth / $DIM.cw), currentBG);
							$$invalidate(6, currentBG.width = $DIM.cw, currentBG);
						} else {
							$$invalidate(6, currentBG.width = videoEl.videoWidth / (videoEl.videoHeight / $DIM.ch), currentBG);
							$$invalidate(6, currentBG.height = $DIM.ch, currentBG);
						}
					} else {
						if (canvasRatio > bgratio) {
							$$invalidate(6, currentBG.width = $DIM.cw, currentBG);
							$$invalidate(6, currentBG.scale.y = currentBG.scale.x, currentBG);
						} else {
							$$invalidate(6, currentBG.height = $DIM.ch, currentBG);
							$$invalidate(6, currentBG.scale.x = currentBG.scale.y, currentBG);
						}
					}
				}
			}
		}

		if ($$self.$$.dirty & /*colorBG, $DIM*/ 160) {
			$: {
				if (colorBG) {
					$$invalidate(5, colorBG.width = $DIM.cw, colorBG);
					$$invalidate(5, colorBG.height = $DIM.ch, colorBG);
				}
			}
		}
	};

	return [
		videoEl,
		$bgURL,
		createImageSprite,
		bgContainer,
		app,
		colorBG,
		currentBG,
		$DIM,
		video_binding,
		loadeddata_handler
	];
}

class Pixi_bg extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { bgContainer: 3, app: 4 });
	}
}

export default Pixi_bg;
export { bgURL, bgList };