/* src/data/analytics.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	component_subscribe,
	init,
	safe_not_equal,
	set_store_value
} from "../../_snowpack/pkg/svelte/internal.js";

import { writable, get } from "../../_snowpack/pkg/svelte/store.js";
import { options } from "../tracking/Holistic.svelte.js";
import { infoExpanded } from "../stores.js";
import { userModel } from "../scene/character.svelte.js";
import { p2pConnection } from "../connections/Peer.svelte.js";
import { bgURL } from "../scene/pixi.bg.svelte.js";

const triggeredData = writable({
	char: [],
	bg: [],
	sticker: [],
	p2pConnection: false,
	uploadedVRM: false,
	firstPerson: false,
	freeCamera: false,
	infoExpanded: false,
	toggledFacemesh: false
});

function instance($$self, $$props, $$invalidate) {
	let $triggeredData;
	component_subscribe($$self, triggeredData, $$value => $$invalidate(0, $triggeredData = $$value));

	if (!window.dataLayer) {
		window.dataLayer = [];
	}

	options.subscribe(e => {
		if (e.face.running && !$triggeredData.toggledFacemesh) {
			dataLayer.push({
				"event": "toggledFacemesh",
				"conversionValue": true
			});

			set_store_value(triggeredData, $triggeredData.toggledFacemesh = true, $triggeredData);
		}
	});

	infoExpanded.subscribe(e => {
		if (e && !$triggeredData.infoExpanded) {
			dataLayer.push({
				"event": "infoExpanded",
				"conversionValue": true
			});

			set_store_value(triggeredData, $triggeredData.infoExpanded = true, $triggeredData);
		}
	});

	userModel.subscribe(e => {
		if (e && e.type === "blob" && !$triggeredData.uploadedVRM) {
			dataLayer.push({
				"event": "uploadedVRM",
				"conversionValue": true
			});

			set_store_value(triggeredData, $triggeredData.uploadedVRM = true, $triggeredData);
			return;
		}

		if (e && e.type === "url" && !$triggeredData.char.includes(e.name)) {
			dataLayer.push({
				"event": "char",
				"conversionValue": e.name
			});

			$triggeredData.char.push(e.name);
		}
	});

	bgURL.subscribe(e => {
		if (e && e.type === "img" && e.pano && !$triggeredData.bg.includes(e.url)) {
			dataLayer.push({
				"event": "bg",
				"conversionValue": e.url.includes("blob:") ? "customBG" : e.url
			});

			$triggeredData.bg.push(e.url);
		}

		if (e && e.type === "color" && !$triggeredData.bg.includes(e.url)) {
			dataLayer.push({ "event": "bg", "conversionValue": e.url });
			$triggeredData.bg.push(e.url);
		}

		if (e && e.type === "iro" && !$triggeredData.bg.includes("iro")) {
			dataLayer.push({ "event": "bg", "conversionValue": "iro" });
			$triggeredData.bg.push("iro");
		}
	});

	p2pConnection.subscribe(e => {
		if (e && !$triggeredData.p2pConnection) {
			dataLayer.push({
				"event": "p2pConnection",
				"conversionValue": true
			});

			set_store_value(triggeredData, $triggeredData.p2pConnection = true, $triggeredData);
		}
	});

	return [];
}

class Analytics extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, null, safe_not_equal, {});
	}
}

export default Analytics;