import './Card.svelte.css.proxy.js';
/* src/components/Card.svelte generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	attr,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_data,
	text,
	transition_in,
	transition_out,
	update_slot
} from "../../_snowpack/pkg/svelte/internal.js";

function fallback_block(ctx) {
	let t;

	return {
		c() {
			t = text(/*cardContent*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*cardContent*/ 2) set_data(t, /*cardContent*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let p;
	let p_data_status_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	const default_slot_or_fallback = default_slot || fallback_block(ctx);

	return {
		c() {
			p = element("p");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(p, "class", "card svelte-yms4qk");
			attr(p, "data-dragging", "false");
			attr(p, "data-status", p_data_status_value = /*isCurrent*/ ctx[0] === true ? "current" : "waiting");
			attr(p, "style", /*styles*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, p, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(p, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], !current ? -1 : dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*cardContent*/ 2)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (!current || dirty & /*isCurrent*/ 1 && p_data_status_value !== (p_data_status_value = /*isCurrent*/ ctx[0] === true ? "current" : "waiting")) {
				attr(p, "data-status", p_data_status_value);
			}

			if (!current || dirty & /*styles*/ 4) {
				attr(p, "style", /*styles*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { isCurrent = false } = $$props;
	let { cardContent = "" } = $$props;
	let { dataParity = 1 } = $$props;
	let { styles = "" } = $$props;

	$$self.$$set = $$props => {
		if ("isCurrent" in $$props) $$invalidate(0, isCurrent = $$props.isCurrent);
		if ("cardContent" in $$props) $$invalidate(1, cardContent = $$props.cardContent);
		if ("dataParity" in $$props) $$invalidate(3, dataParity = $$props.dataParity);
		if ("styles" in $$props) $$invalidate(2, styles = $$props.styles);
		if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	return [isCurrent, cardContent, styles, dataParity, $$scope, slots];
}

class Card extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			isCurrent: 0,
			cardContent: 1,
			dataParity: 3,
			styles: 2
		});
	}
}

export default Card;