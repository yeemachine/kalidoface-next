/* src/tracking/smooth.svelte generated by Svelte v3.38.3 */
import { SvelteComponent, init, safe_not_equal } from "../../_snowpack/pkg/svelte/internal.js";

import { get } from "../../_snowpack/pkg/svelte/store.js";
import { profiles } from "../scene/profiles.svelte.js";
import faceMap, { stabilizeBlink } from "../utils/faceMap/index.js";

//Takes predicted values, smoothes, and updates profile object
import { spring } from "../../_snowpack/pkg/svelte/motion.js";

let user_face_position = spring(
	{
		head: { x: 0, y: 0, z: 0 },
		width: 0.3,
		height: 0.6,
		center: { x: 0.5, y: 0.5, z: 0 }
	},
	{
		stiffness: 0.05,
		damping: 0.5,
		precision: 0.01
	}
);

user_face_position.subscribe(val => {
	if (val && profiles) {
		const face = get(profiles).user.tracking.face;
		face.head.width = val.width;
		face.head.height = val.height;
		face.head.center = val.center;
		face.head.x = val.head.x;
		face.head.y = val.head.y;
		face.head.z = val.head.z;
	}
});

let user_smooth_face = spring(
	{
		eye: { l: 1, r: 1 },
		mouth: {
			x: 0,
			y: 0,
			shape: { A: 0, E: 0, I: 0, O: 0, U: 0 }
		},
		head: { x: 0, y: 0, z: 0 },
		brow: 0,
		pupil: { x: 0, y: 0 }
	},
	{
		//  stiffness: 0.1,
		// damping: 0.8,
		stiffness: 0.15,
		damping: 0.7,
		precision: 0.01
	}
);

user_smooth_face.subscribe(val => {
	if (val && profiles) {
		const face = get(profiles).user.tracking.face;

		// face.head.x = val.head.x
		// face.head.y = val.head.y
		// face.head.z = val.head.z
		let turnLimit = 35;

		if (val.head.x >= -turnLimit && val.head.x <= turnLimit && val.head.y >= -turnLimit && val.head.y <= turnLimit) {
			face.brow = val.brow;
			face.pupil = val.pupil;
			face.eye = stabilizeBlink(val.eye, val.head.x);
			face.mouth = val.mouth;
		}
	}
});

class Smooth extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, null, safe_not_equal, {});
	}
}

export default Smooth;
export { user_face_position, user_smooth_face };