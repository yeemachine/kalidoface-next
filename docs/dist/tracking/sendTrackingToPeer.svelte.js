/* src/tracking/sendTrackingToPeer.svelte generated by Svelte v3.38.3 */
import { SvelteComponent, init, safe_not_equal } from "../../_snowpack/pkg/svelte/internal.js";

import { options } from "./Holistic.svelte.js";
import { p2pConnection } from "../connections/Peer.svelte.js";
import { newFace } from "./onFacemeshResults.svelte.js";
import { profiles } from "../scene/profiles.svelte.js";
import { get } from "../../_snowpack/pkg/svelte/store.js";

const compressXYZ = (obj, key, val) => {
	obj[key + "X"] = val.x;
	obj[key + "Y"] = val.y;
	obj[key + "Z"] = val.z;
};

const expandXYZ = (obj, key, val, side = null) => {
	if (side) {
		obj[side][key] = {
			x: val[side + key + "X"],
			y: val[side + key + "Y"],
			z: val[side + key + "Z"]
		};
	} else {
		obj[key] = {
			x: val[key + "X"],
			y: val[key + "Y"],
			z: val[key + "Z"]
		};
	}
};

const sendTrackingData = () => {
	if (get(p2pConnection)) {
		let profile = get(profiles).user;

		let trackingData = {
			headX: newFace.head.x,
			headY: newFace.head.y,
			headZ: newFace.head.z,
			eyeL: newFace.eye.l,
			eyeR: newFace.eye.r,
			brow: newFace.brow,
			pupilX: newFace.pupil.x,
			pupilY: newFace.pupil.y,
			mouthX: newFace.mouth.x,
			mouthY: newFace.mouth.y,
			mouthA: newFace.mouth.shape.A,
			mouthE: newFace.mouth.shape.E,
			mouthI: newFace.mouth.shape.I,
			mouthO: newFace.mouth.shape.O,
			mouthU: newFace.mouth.shape.U,
			detected: profile.detected,
			type: "face"
		};

		get(p2pConnection).send(trackingData);
	}
};

class SendTrackingToPeer extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, null, safe_not_equal, {});
	}
}

export default SendTrackingToPeer;
export { compressXYZ, expandXYZ, sendTrackingData };