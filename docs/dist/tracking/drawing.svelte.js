/* src/tracking/drawing.svelte generated by Svelte v3.38.3 */
import { SvelteComponent, init, safe_not_equal } from "../../_snowpack/pkg/svelte/internal.js";

import { get } from "../../_snowpack/pkg/svelte/store.js";
import { videoEl, canvasEl, canvasCtx } from "./webcam.svelte.js";
import { FACEMESH_TESSELATION } from "./tesselation.svelte.js";
import "../../_snowpack/pkg/@mediapipe/drawing_utils/drawing_utils.js";

function drawResults(results, type = "holistic") {
	canvasEl.width = videoEl.videoWidth;
	canvasEl.height = videoEl.videoHeight;
	canvasCtx.save();
	canvasCtx.clearRect(0, 0, canvasEl.width, canvasEl.height);

	// canvasCtx.drawImage(
	//   videoEl,
	//   0,
	//   0,
	//   canvasEl.width,
	//   canvasEl.height
	// );
	switch (type) {
		case "facemesh":
			let lm = [];
			for (let i = 0; i < results.scaledMesh.length; i++) {
				lm.push({
					visibility: undefined,
					x: results.scaledMesh[i][0] / videoEl.videoWidth,
					y: results.scaledMesh[i][1] / videoEl.videoHeight,
					z: results.scaledMesh[i][2] / videoEl.videoWidth
				});
			}
			drawConnectors(canvasCtx, lm, FACEMESH_TESSELATION, { color: "#C0C0C070", lineWidth: 1 });
			let pupils = [lm[468], lm[468 + 5]];
			drawLandmarks(canvasCtx, pupils, { color: "#ffe603", lineWidth: 2 });
			break;
		default:
			break;
	}

	canvasCtx.restore();
}

class Drawing extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, null, safe_not_equal, {});
	}
}

export default Drawing;
export { drawResults };