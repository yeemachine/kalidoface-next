/* src/tracking/calcHand.svelte generated by Svelte v3.38.3 */
import { SvelteComponent, init, safe_not_equal } from "../../_snowpack/pkg/svelte/internal.js";

import Vector from "../utils/vector.js";

let calcHand = (lm, side = "Right") => {
	let palm = [
		new Vector(lm[0]),
		new Vector(lm[side === "Right" ? 17 : 5]),
		new Vector(lm[side === "Right" ? 5 : 17])
	];

	let handRotation = Vector.rollPitchYaw(palm[0], palm[1], palm[2]);
	handRotation.z -= side === "Left" ? 0.3 : 0.5;

	return {
		Wrist: {
			x: handRotation.x * 180,
			y: handRotation.y * 180,
			z: handRotation.z * 180
		},
		RingProximal: {
			x: 0,
			y: 0,
			z: Vector.angleBetween3DCoords(lm[0], lm[13], lm[14]) * 180
		},
		RingIntermediate: {
			x: 0,
			y: 0,
			z: Vector.angleBetween3DCoords(lm[13], lm[14], lm[15]) * 180
		},
		RingDistal: {
			x: 0,
			y: 0,
			z: Vector.angleBetween3DCoords(lm[14], lm[15], lm[16]) * 180
		},
		IndexProximal: {
			x: 0,
			y: 0,
			z: Vector.angleBetween3DCoords(lm[0], lm[5], lm[6]) * 180
		},
		IndexIntermediate: {
			x: 0,
			y: 0,
			z: Vector.angleBetween3DCoords(lm[5], lm[6], lm[7]) * 180
		},
		IndexDistal: {
			x: 0,
			y: 0,
			z: Vector.angleBetween3DCoords(lm[6], lm[7], lm[8]) * 180
		},
		MiddleProximal: {
			x: 0,
			y: 0,
			z: Vector.angleBetween3DCoords(lm[0], lm[9], lm[10]) * 180
		},
		MiddleIntermediate: {
			x: 0,
			y: 0,
			z: Vector.angleBetween3DCoords(lm[9], lm[10], lm[11]) * 180
		},
		MiddleDistal: {
			x: 0,
			y: 0,
			z: Vector.angleBetween3DCoords(lm[10], lm[11], lm[12]) * 180
		},
		ThumbProximal: {
			x: 0,
			y: 0,
			z: Vector.angleBetween3DCoords(lm[0], lm[1], lm[2]) * 180
		},
		ThumbIntermediate: {
			x: 0,
			y: 0,
			z: Vector.angleBetween3DCoords(lm[1], lm[2], lm[3]) * 180
		},
		ThumbDistal: {
			x: 0,
			y: 0,
			z: Vector.angleBetween3DCoords(lm[2], lm[3], lm[4]) * 180
		},
		LittleProximal: {
			x: 0,
			y: 0,
			z: Vector.angleBetween3DCoords(lm[0], lm[17], lm[18]) * 180
		},
		LittleIntermediate: {
			x: 0,
			y: 0,
			z: Vector.angleBetween3DCoords(lm[17], lm[18], lm[19]) * 180
		},
		LittleDistal: {
			x: 0,
			y: 0,
			z: Vector.angleBetween3DCoords(lm[18], lm[19], lm[20]) * 180
		}
	};
};

class CalcHand extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, null, safe_not_equal, {});
	}
}

export default CalcHand;
export { calcHand };