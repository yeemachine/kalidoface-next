<script context="module">
  import { writable,get } from 'svelte/store';
  import Vector from '../utils/vector.js'
  import {clamp} from '../utils/helpers.js'
  import {cameraOn,hideCamera,videoReady,videoEl} from './webcam.svelte';
  import {cameraConfig} from '../scene/CameraControls.svelte'


export let calcPose = (lm) => {
  const flipHorizontal = get(cameraConfig).firstPerson;
  // const p12 = new Vector(lm[12]);
  // const p11 = new Vector(lm[11]);
  // const p13 = new Vector(lm[13]);
  // const p15 = new Vector(lm[15]);
  // const shoulderWidth = p11.distance(p12,2)
  // const upperArmWidth = p11.distance(p13,2)
  // const handtoShoulder = p11.distance(p15,2)

  
  // console.log(`upperarm: ${p11.distance(p13)}, lowerarm: ${p13.distance(p15)}, handtoshoulder: ${p11.distance(p15)}`)
  // console.log(handtoShoulder/upperArmWidth)
  
   let upperArm = {
        r:Vector.findRotation(lm[11],lm[13],false),
        l:Vector.findRotation(lm[12],lm[14],false)
      }
      upperArm.r.x = Vector.normalizeRadiansEXP(upperArm.r.x)
      upperArm.l.x = Vector.normalizeRadiansEXP(upperArm.l.x)
      upperArm.r.z = Vector.normalizeRadians(upperArm.r.z)
      upperArm.l.z = Vector.normalizeRadians(upperArm.l.z)
   
      upperArm.r.y = Vector.angleBetween3DCoords(lm[12],lm[11],lm[13]);
      upperArm.l.y = Vector.angleBetween3DCoords(lm[11],lm[12],lm[14]);
  
      //temporary fix for left arm inaccurate raise
      // upperArm.l.x -= (1);
      
      let lowerArm = {
        r:Vector.findRotation(lm[13],lm[15],false),
        l:Vector.findRotation(lm[14],lm[16],false)
      }
      
      lowerArm.r.x = Vector.normalizeRadians(lowerArm.r.x)
      lowerArm.l.x = Vector.normalizeRadians(lowerArm.l.x)
  
      lowerArm.r.y = Vector.angleBetween3DCoords(lm[15],lm[13],lm[11]);
      lowerArm.l.y = Vector.angleBetween3DCoords(lm[12],lm[14],lm[16]);
      
      lowerArm.r.z = Vector.normalizeRadians(lowerArm.r.z)
      lowerArm.l.z = Vector.normalizeRadians(lowerArm.l.z)
      lowerArm.r.z = clamp(lowerArm.r.z,-2.14,0)
      lowerArm.l.z = clamp(lowerArm.l.z,-2.14,0)
            
//       let upperLeg = {
//         r:Vector.findRotation(lm[23],lm[25]),
//         l:Vector.findRotation(lm[24],lm[26])
//       }
//       upperLeg.r.z = clamp(upperLeg.r.z - .5,-.3,0)
//       upperLeg.l.z = clamp(upperLeg.l.z - .5,-.3,0)
      
//       upperLeg.r.y = Vector.angleBetween3DCoords(lm[24],lm[23],lm[25]);
//       upperLeg.l.y = Vector.angleBetween3DCoords(lm[23],lm[24],lm[26]);
      
//       upperLeg.r.y = clamp(upperLeg.r.y - .5,-.3,.3)
//       upperLeg.l.y = clamp(upperLeg.l.y - .5,-.3,.3)
      
//       let lowerLeg = {
//         r:Vector.findRotation(lm[25],lm[27]),
//         l:Vector.findRotation(lm[26],lm[28])
//       }
      
//       lowerLeg.r.z = clamp(lowerLeg.r.z,-.8,0)
//       lowerLeg.l.z = clamp(lowerLeg.l.z,-.8,0)
      
//       lowerLeg.r.x = 0
//       lowerLeg.l.x = 0
      
      let hand = {
        r:Vector.findRotation(
          Vector.fromArray(lm[15]),
          Vector.lerp(
            Vector.fromArray(lm[17]),
            Vector.fromArray(lm[19]),
            .5)
        ),
        l:Vector.findRotation(
          Vector.fromArray(lm[16]),
          Vector.lerp(
            Vector.fromArray(lm[18]),
            Vector.fromArray(lm[20]),
            .5)
        )
      }
      
      
      let hipLeft = Vector.fromArray(lm[23])
      let hipRight = Vector.fromArray(lm[24])
      let hipCenter = hipLeft.lerp(hipRight);
      let hipDistance = hipLeft.distance(hipRight) //calc distance to camera based on size. 
  
      let hips = {
        position:{
          x:hipCenter.x-.5,
          y:0,
          z:clamp(hipDistance-.3,-.1,.1)},
        rotation:Vector.findRotation(hipLeft, hipRight)
      }
      
      let spine = Vector.rollPitchYaw(lm[flipHorizontal ? 12 : 11],lm[flipHorizontal ? 11 : 12])
      spine.x += .5
      if(flipHorizontal){
        spine.x = -spine.x
      }
      
      let leftHandOffscreen = videoEl.videoHeight - 20 < lm[15].y
      let rightHandOffscreen = videoEl.videoHeight - 20 < lm[16].y
      console.log(lm[15].y,lm[16].y)
      //multiply by 180 to denoise
      upperArm.l = upperArm.l.multiply(rightHandOffscreen ? 0 : 180)
      upperArm.l.z = rightHandOffscreen ? .55*180 : upperArm.l.z
      upperArm.r = upperArm.r.multiply(leftHandOffscreen ? 0 : 180)
      upperArm.r.z = leftHandOffscreen ? .55*180 : upperArm.r.z
  
      lowerArm.l = lowerArm.l.multiply(rightHandOffscreen ? 0 : 180)
      lowerArm.r = lowerArm.r.multiply(leftHandOffscreen ? 0 : 180)
      hand.l = hand.l.multiply(rightHandOffscreen ? 0 : 180)
      hand.r = hand.r.multiply(leftHandOffscreen ? 0 : 180)
  
      // upperLeg.l = upperLeg.l.multiply(180)
      // upperLeg.r = upperLeg.r.multiply(180)
      // lowerLeg.l = lowerLeg.l.multiply(180)
      // lowerLeg.r = lowerLeg.r.multiply(180)
      spine = spine.multiply(180)
  
      return {
        upperArm:upperArm,
        lowerArm:lowerArm,
        // upperLeg:upperLeg,
        // lowerLeg:lowerLeg,
        hand:hand,
        hips:hips,
        spine:spine
      }
}
</script>